openapi: 3.0.3
info:
  title: Lifetime ISA
  description: |
    # Save reference numbers
    
    When you report or get information from the API, you will get a unique reference number. You should save all reference numbers because you may need them for other API calls.
    
    # Testing
    
    You can use the sandbox environment to [test this API](https://developer.service.hmrc.gov.uk/api-documentation/docs/testing).

    It does not currently support [stateful behaviour](https://developer.service.hmrc.gov.uk/api-documentation/docs/testing/stateful-behaviour), but you can use the payloads described in **Test data** sections of each endpoint to test specific scenarios.

    You must set up a test user which is an organisation for this API using the [Create Test User API](https://developer.service.hmrc.gov.uk/api-documentation/docs/api/service/api-platform-test-user/1.0#_create-a-test-user-which-is-an-organisation_post_accordion).
  version: '2.0'
servers:
  - url: https://test-api.service.hmrc.gov.uk
    description: Sandbox
  - url: https://api.service.hmrc.gov.uk
    description: Production
paths:
  /lifetime-isa/manager/{lisaManagerReferenceNumber}:
    get:
      tags:
        - LISA Endpoints
      summary: Get a list of all available endpoints
      description: |
        Use a LISA manager reference to get a list of all available endpoints.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="40%">
            <col width="60%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr font-size=14>
                    <td><p>Request with an invalid LISA Manager reference number</p><p class ="code--block">lisaManagerReferenceNumber: 123456</p></td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: getListOfAllAvailableEndpoints
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerResponse'
              example:
                lisaManagerReferenceNumber: Z543210
                _links:
                  self:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}
                    methods:
                    - GET
                  investors:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/investors
                    methods:
                    - POST
                  accounts:
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts
                    methods:
                    - POST
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}
                    methods:
                    - GET
                  close account:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/close-account
                    methods:
                    - POST
                  reinstate account:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/reinstate-account
                    methods:
                    - POST
                  update subscription:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/update-subscription
                    methods:
                    - POST
                  life events:
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events
                    methods:
                    - POST
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/{lifeEventId}
                    methods:
                    - GET
                  annual returns:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/annual-returns
                    methods:
                    - POST
                  bonus payments:
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/transactions
                    methods:
                    - POST
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/transactions/{transactionId}
                    methods:
                    - GET
                  withdrawal charges:
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/withdrawal-charges
                    methods:
                    - POST
                  - href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/withdrawal-charges/{transactionId}
                    methods:
                    - GET
                  property purchase fund release:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/fund-releases
                    methods:
                    - POST
                  property purchase extension:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/purchase-extensions
                    methods:
                    - POST
                  property purchase outcome:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/purchase-outcomes
                    methods:
                    - POST
                  bulk payments:
                    href: /lifetime-isa/manager/{lisaManagerReferenceNumber}/payments?startDate={startDate}&endDate={endDate}
                    methods:
                    - GET
                  bulk payment breakdown:
                    href: /lifetime-isa/manager/$lisaManagerReferenceNumber/accounts/{accountId}/transactions/{transactionId}/payments
                    methods:
                    - GET
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/investors:
    post:
      tags:
        - LISA Investors
      summary: Create a LISA investor
      description: |
        Report a new LISA investor to HMRC to generate an investor ID. If the investor already exists, you will get their reference number.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="35%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Request with a valid payload and LISA Manager reference number</p> <p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorNINO": "AA123456A",
          "firstName": "First Name",
          "lastName": "Last Name",
          "dateOfBirth": "1985-03-25"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Investor created",
            "investorId": "9876543210"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and an invalid LISA Manager reference number</p> <p class="code--block">lisaManagerReferenceNumber: 123456</p></td>
                    <td>
        <pre class="code--block">
        {
          "investorNINO": "AA123456A",
          "firstName": "First Name",
          "lastName": "Last Name",
          "dateOfBirth": "1985-03-25"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing invalid and/or missing data</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorNINO": "A1234567A",
          "firstName": true,
          "dateOfBirth": "25-03-1985"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/lastName"
            },
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/dateOfBirth"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/investorNINO"
            },
            {
              "code": "INVALID_DATA_TYPE",
              "message": "Invalid data type has been used",
              "path": "/firstName"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing investor details which do not match HMRC’s records</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorNINO": "AA111111A",
          "firstName": "First Name",
          "lastName": "Last Name",
          "dateOfBirth": "1985-03-25"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_NOT_FOUND",
          "message": "The investor details given do not match with HMRC’s records"
        }
        </pre>
                     </td>
                </tr>
                <tr>
                   <td><p>Request with an invalid 'Accept' header</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br><br>Accept: application/vnd.hmrc.1.0</p></td>
                   <td>
        <pre class="code--block">
        {
          "investorNINO": "AA123456A",
          "firstName": "First Name",
          "lastName": "Last Name",
          "dateOfBirth": "1985-03-25"
        }
        </pre>
                   </td>
                   <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                   </td>
                </tr>
                <tr>
                    <td><p>Request containing a pre-existing investor’s details</p> <p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorNINO": "AA222222A",
          "firstName": "First Name",
          "lastName": "Last Name",
          "dateOfBirth": "1985-03-25"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ALREADY_EXISTS",
          "message": "The investor already has a record with HMRC",
          "id": "1234567890"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: createLisaInvestor
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerInvestorsRequest'
            example:
              investorNINO: AB123456D
              firstName: FirstName
              lastName: LastName
              dateOfBirth: 1973-03-24
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerInvestorsResponse'
              example:
                status: 201
                success: true
                data:
                  message: Investor created
                  investorId: '9876543210'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusBadRequest'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              example:
                code: INVESTOR_NOT_FOUND
                message: The investor details given do not match with HMRC’s records.
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                recordExists:
                  value:
                    code: INVESTOR_ALREADY_EXISTS
                    message: The investor already has a record with HMRC.
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts:
    post:
      tags:
        - LISA Accounts
      summary: Create or transfer a LISA account
      description: |
        Create a new account you’ve set up for an investor, or transfer an existing account from another LISA provider. If you’re creating a new account you’ll need to create a LISA investor first.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="40%">
            <col width="35%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Create request with a valid payload and LISA Manager reference number</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Account created",
            "accountId": "1234567890"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Transfer request with a valid payload and LISA Manager reference number</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "Transferred",
          "accountId": "1234567891",
          "firstSubscriptionDate": "2017-04-06",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Account transferred",
            "accountId": "1234567891"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Transfer current year request with a valid payload and LISA Manager reference number</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "Current year funds transferred",
          "accountId": "1234567892",
          "firstSubscriptionDate": "2017-04-06",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Account transferred",
            "accountId": "1234567892"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Transfer previous year request with a valid payload and LISA Manager reference number</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "Previous year funds transferred",
          "accountId": "1234567893",
          "firstSubscriptionDate": "2017-04-06",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Account transferred",
            "accountId": "1234567893"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and an invalid LISA Manager reference number</p><p class ="code--block">lisaManagerReferenceNumber: A123456</p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing invalid and/or missing data</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543",
          "creationReason": "New",
          "firstSubscriptionDate": "2011"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/firstSubscriptionDate"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/investorId"
            },
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/accountId"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing dates before 6 April 2017</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "Transferred",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2016-04-06",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2016-04-06"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "The firstSubscriptionDate cannot be before 6 April 2017",
              "path": "/firstSubscriptionDate"
            },
            {
              "code": "INVALID_DATE",
              "message": "The transferInDate cannot be before 6 April 2017",
              "path": "/transferAccount/transferInDate"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing investor details which cannot be found</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "1234567890",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_NOT_FOUND",
          "message": "The investor details given do not match with HMRC’s records"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an investor who is not eligible for a LISA account</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "1234567891",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ELIGIBILITY_CHECK_FAILED",
          "message": "The investor is not eligible for a LISA account"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an investor who has not passed the compliance check</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "1234567892",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_COMPLIANCE_CHECK_FAILED",
          "message": "You cannot create or transfer a LISA account because the investor has failed a compliance check"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Transfer request containing transfer details which cannot be found in HMRC's records</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "1234567889",
          "creationReason": "Transferred",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "PREVIOUS_INVESTOR_ACCOUNT_DOES_NOT_EXIST",
          "message": "The transferredFromAccountId and transferredFromLMRN given do not match an account on HMRC’s records"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Transfer request without transfer details</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "Transferred",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "TRANSFER_ACCOUNT_DATA_NOT_PROVIDED",
          "message": "You must give a transferredFromAccountId, transferredFromLMRN and transferInDate when the creationReason is transferred, current or previous year funds transferred"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Create request containing transfer details</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "TRANSFER_ACCOUNT_DATA_PROVIDED",
          "message": "You must only give a transferredFromAccountId, transferredFromLMRN, and transferInDate when the creationReason is transferred, current or previous year funds transferred"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing a LISA account which has already been closed</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "0000000403",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing a LISA account which has already been cancelled</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "2000000403",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing a LISA account which has already been voided</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "1000000403",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with an invalid 'Accept' header</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br><br>Accept: application/vnd.hmrc.1.0</p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "9876543210",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a pre-existing account</p><p class ="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "investorId": "1234567899",
          "creationReason": "New",
          "accountId": "1234567890",
          "firstSubscriptionDate": "2017-04-06"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_EXISTS",
          "message": "This investor already has a LISA account",
          "accountId": "1234567890"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: createOrTransferLisaAccount
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsRequest'
            examples:
              example-1:
                value:
                  investorId: '9876543210'
                  creationReason: New
                  accountId: '1234567890'
                  firstSubscriptionDate: 2017-04-06
              example-2:
                value:
                  investorId: '9876543210'
                  creationReason: Transferred
                  accountId: '1234567891'
                  firstSubscriptionDate: 2017-04-06
                  transferAccount:
                    transferredFromAccountId: '8765432100'
                    transferredFromLMRN: Z654321
                    transferInDate: 2017-04-06
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsResponse'
              examples:
                example-1:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Account created
                      accountId: '1234567890'
                example-2:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Account transferred
                      accountId: '1234567891'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                badRequest:
                  $ref: '#/components/examples/invalidLmrn'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                investorNotFound:
                  description: The investor details given do not match with HMRC’s records
                  value:
                    code: INVESTOR_NOT_FOUND
                    message: 'invalid status: must create with open status'
                outsideAgeRange:
                  description: The investor is not eligible for a LISA account
                  value:
                    code: INVESTOR_ELIGIBILITY_CHECK_FAILED
                    message: Can’t open a LISA if investor is older than 40 or younger than 18
                complianceFail:
                  value:
                    code: INVESTOR_COMPLIANCE_CHECK_FAILED
                    message: You cannot create or transfer a LISA account because the investor has failed a compliance check
                prevAccntDoNoExists:
                  description: The transferredFromAccountId and transferredFromLMRN given do not match an account on HMRC’s records
                  value:
                    code: PREVIOUS_INVESTOR_ACCOUNT_DOES_NOT_EXIST
                    message: Previous Investor Account Doesn’t Exist
                noTransferAccntData:
                  description: You must give a transferredFromAccountId, transferredFromLMRN and transferInDate when the creationReason is transferred, current or previous year funds transferred
                  value:
                    code: TRANSFER_ACCOUNT_DATA_NOT_PROVIDED
                    message: transfer account data not provided
                transferAccntDataProvided:
                  description: You must only give a transferredFromAccountId, transferredFromLMRN, and transferInDate when the creationReason is transferred, current or previous year funds transferred
                  value:
                    code: TRANSFER_ACCOUNT_DATA_PROVIDED
                    message: transfer account data provided
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              example:
                code: INVESTOR_ACCOUNT_ALREADY_EXISTS
                message: This investor already has a LISA account
                accountId: '1234567890'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/reinstate-account:
    post:
      tags:
        - LISA Accounts
      summary: Reinstate a LISA account
      description: |
        Re-open a LISA account that has been closed.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="35%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Request with a valid payload, LISA Manager reference number and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "1234567890"
        }
        </pre>
                    </td>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "status": 200,
          "success": true,
          "data": {
            "message": "This account has been reinstated",
            "accountId": "1234567890"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and account ID, but an invalid LISA Manager reference number</p><p class="code--block">lisaManagerReferenceNumber: A12345</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "1234567890"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with a invalid payload</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "1234=5678"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
          {
            "code": "BAD_REQUEST",
            "message": "Bad Request",
            "errors": [
              {
                "code": "INVALID_FORMAT",
                "message": "Invalid format has been used",
                "path": "/accountId"
              }
            ]
          }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that is open or active</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "2000000403"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_OPEN",
          "message": "The account already has a status of Open"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that is closed with a closure reason as transferred out</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "0000000403"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "You cannot reinstate this account because it was closed with a closure reason of transferred out"
        }
        </pre>
                    </td>
                </tr>
                 <tr>
                    <td><p>Request for an account that is closed with a closure reason as cancelled</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "1000000403"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "You cannot reinstate this account because it was closed with a closure reason of cancellation"
        }
        </pre>
                    </td>
                </tr>
                 <tr>
                    <td><p>Request for an account that is closed with a closure reason as cancelled</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "3000000403"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_COMPLIANCE_CHECK_FAILED",
          "message": "You cannot reinstate this account because the investor has failed a compliance check"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an account ID that does not exist</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a></p></td>
                    <td>
        <pre class="code--block">
        {
          "accountId": "0000000404"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: reinstateLisaAccount
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsReinstateAccountRequest'
            examples:
              example-1:
                value:
                  accountId: '8765432100'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsReinstateAccountResponse'
              example:
                status: 200
                success: true
                data:
                  message: This account has been reinstated
                  accountId: '8765432100'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidPayload:
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
                    errors:
                    - code: INVALID_FORMAT
                      message: Invalid format has been used
                      path: /accountId
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountClosed:
                  value:
                    code: INVESTOR_ACCOUNT_ALREADY_CLOSED
                    message: You cannot reinstate this account because it was closed with a closure reason of transferred out
                accountClosedCancelled:
                  value:
                    code: INVESTOR_ACCOUNT_ALREADY_CANCELLED
                    message: You cannot reinstate this account because it was closed with a closure reason of cancellation
                accountVoided:
                  value:
                    code: INVESTOR_ACCOUNT_ALREADY_OPEN
                    message: You cannot reinstate this account because it is already open
                complianceFail:
                  value:
                    code: INVESTOR_COMPLIANCE_CHECK_FAILED
                    message: You cannot reinstate this account because the investor has failed a compliance check
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}:
    get:
      tags:
        - LISA Accounts
      summary: Get account details
      description: |
        Use an account ID to get account details.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
          <col width="40%">
          <col width="60%">
          <thead>
            <tr>
                <th>Scenario</th>
                <th>Response</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number and account ID (open account)</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "accountId": "1234567890",
          "investorId": "9876543210",
          "creationReason": "New",
          "firstSubscriptionDate": "2017-04-06",
          "accountStatus": "OPEN",
          "subscriptionStatus": "ACTIVE"
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number and account ID (transferred account)</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567891
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "accountId": "1234567891",
          "investorId": "9876543210",
          "creationReason": "Transferred",
          "firstSubscriptionDate": "2017-04-06",
          "accountStatus": "OPEN",
          "subscriptionStatus": "AVAILABLE",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number and account ID (Current year funds transferred)</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567892
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "accountId": "1234567892",
          "investorId": "9876543210",
          "creationReason": "Current year funds transferred",
          "firstSubscriptionDate": "2017-04-06",
          "accountStatus": "OPEN",
          "subscriptionStatus": "AVAILABLE",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number and account ID (Previous year funds transferred)</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567893
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "accountId": "1234567893",
          "investorId": "9876543210",
          "creationReason": "Previous year funds transferred",
          "firstSubscriptionDate": "2017-04-06",
          "accountStatus": "OPEN",
          "subscriptionStatus": "AVAILABLE",
          "transferAccount": {
            "transferredFromAccountId": "8765432100",
            "transferredFromLMRN": "Z654321",
            "transferInDate": "2017-04-06"
          }
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number and account ID (voided account)</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1000000200
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "accountId": "1000000200",
          "investorId": "9876543210",
          "creationReason": "New",
          "firstSubscriptionDate": "2017-04-06",
          "accountStatus": "VOID",
          "subscriptionStatus": "VOID"
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number and account ID (closed account)</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 2000000200
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "accountId": "2000000200",
          "investorId": "9876543210",
          "creationReason": "New",
          "firstSubscriptionDate": "2017-04-06",
          "accountStatus": "CLOSED",
          "subscriptionStatus": "VOID",
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-10-25"
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid account ID, but an invalid LISA Manager reference number</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: 123456<br>
                  accountId: 1234567890
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Request with a valid LISA Manager reference number, but an invalid account ID</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234%3D5678
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
              </td>
            </tr>
            <tr>
                <td>
                    <p>Request containing an account ID that does not exist</p>
                    <p class="code--block">
                        lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                        accountId: 0000000404
                    </p>
                </td>
                <td>
                  <p>HTTP status: <code class="code--slim">404 (Not found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                </td>
            </tr>
            <tr>
              <td>
                <p>Request with an invalid 'Accept' header</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                  <br>accountId: 1234567890<br>
                  <br>
                  Accept: application/vnd.hmrc.1.0
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
              </td>
            </tr>
          </tbody>
        </table>
      operationId: getAccountDetails
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerGetAccountsResponse'
              examples:
                example-1:
                  value:
                    accountId: '1234567890'
                    investorId: '9876543210'
                    creationReason: New
                    firstSubscriptionDate: 2017-04-06
                    accountStatus: OPEN
                    subscriptionStatus: ACTIVE
                example-2:
                  value:
                    accountId: '1234567891'
                    investorId: '9876543210'
                    creationReason: Transferred
                    firstSubscriptionDate: 2017-04-06
                    accountStatus: OPEN
                    subscriptionStatus: AVAILABLE
                    transferAccount:
                      transferredFromAccountId: '8765432100'
                      transferredFromLMRN: Z654321
                      transferInDate: 2017-04-06
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/close-account:
    post:
      tags:
        - LISA Accounts
      summary: Close an existing LISA account
      description: |
        Close an account and report the reason and date.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="35%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Request with a valid payload, LISA Manager reference number and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "status": 200,
          "success": true,
          "data": {
            "message": "LISA account closed",
            "accountId": "1234567890"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload, LISA Manager reference number and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "Cancellation",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "status": 200,
          "success": true,
          "data": {
            "message": "LISA account closed",
            "accountId": "1234567890"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and account ID, but an invalid LISA Manager reference number</p><p class="code--block">lisaManagerReferenceNumber: A12345<br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with a valid payload and LISA Manager reference number, but an invalid account ID</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>accountId: 1234%3D5678
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing invalid and/or missing data</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "closureDate": "3000"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/closureDate"
            },
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/accountClosureReason"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing a closure date before 6 April 2017</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-04-05"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "The closureDate cannot be before 6 April 2017",
              "path": "/closureDate"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been voided</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: A1234560</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been closed</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: A1234561</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                    </td>
                </tr>
                 <tr>
                    <td><p>Request to close an account with cancellation as the reason when the cancellation period is over</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: A1234568</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "Cancellation",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "CANCELLATION_PERIOD_EXCEEDED",
          "message": "You cannot close the account with cancellation as the reason because the cancellation period is over"
        }
        </pre>
                    </td>
                </tr>
                </tr>
                 <tr>
                    <td><p>Request to close an account with all funds withdrawn as the reason and it is still within the cancellation period</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: A1234569</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "ACCOUNT_WITHIN_CANCELLATION_PERIOD",
          "message": "You cannot close the account with all funds withdrawn as the reason because it is within the cancellation period"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an account ID that does not exist</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: A1234562</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with an invalid 'Accept' header</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br><br>Accept: application/vnd.hmrc.1.0</p></td>
                    <td>
        <pre class="code--block">
        {
          "accountClosureReason": "All funds withdrawn",
          "closureDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: closeExistingLisaAccount
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsCloseAccountRequest'
            examples:
              example-1:
                value:
                  accountClosureReason: All funds withdrawn
                  closureDate: 2017-05-20
              example-2:
                value:
                  accountClosureReason: Cancellation
                  closureDate: 2017-05-20
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lifetimeIsaManagerAccountsCloseAccountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                badRequest:
                  $ref: '#/components/examples/invalidLmrn'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountCancellationPeriodExceeded:
                  value:
                    code: CANCELLATION_PERIOD_EXCEEDED
                    message: You cannot close the account with cancellation as the reason because the cancellation period is over
                accountWithinCancellationPeriod:
                  value:
                    code: ACCOUNT_WITHIN_CANCELLATION_PERIOD
                    message: You cannot close the account with all funds withdrawn as the reason because it is within the cancellation period
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/update-subscription:
    post:
      tags:
        - LISA Accounts
      summary: Modify date of first subscription of a LISA account
      description: |
        Modify the date when the first deposit was paid after a LISA account was created.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="35%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Request with a valid payload, LISA Manager reference number and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"<br>
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
          {
            "status": 200,
            "success": true,
            "data": {
              "code": "UPDATED",
              "message": "Successfully updated the firstSubscriptionDate for the LISA account",
              "accountId": "1234567890"
            }
          }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload, LISA Manager reference number and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567891</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "status": 200,
          "success": true,
          "data": {
            "code": "UPDATED_AND_ACCOUNT_VOID",
            "message": "Successfully updated the firstSubscriptionDate for the LISA account and changed the account status to void because the investor has another account with an earlier firstSubscriptionDate",
            "accountId": "1234567891"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and account ID, but an invalid LISA Manager reference number</p><p class="code--block">lisaManagerReferenceNumber: A12345<br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and LISA Manager reference number, but an invalid and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234%3D5678</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing invalid and/or missing data</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "3000-01-01"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/firstSubscriptionDate"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing a first subscription date before 6 April 2017</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-04-05"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "The firstSubscriptionDate cannot be before 6 April 2017",
              "path": "/firstSubscriptionDate"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been closed</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000901</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been cancelled</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000903</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been void</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000902</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an account ID that does not exist</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000404</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with an invalid 'Accept' header</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br><br>Accept: application/vnd.hmrc.1.0</p></td>
                    <td>
        <pre class="code--block">
        {
          "firstSubscriptionDate": "2017-05-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: modifyDateOfFirstSubscriptionOfLisaAccount
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsUpdateSubscriptionRequest'
            examples:
              example-1:
                value:
                  firstSubscriptionDate: 2017-05-20
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsUpdateSubscriptionResponse'
              examples:
                example-1:
                  value:
                    status: 200
                    success: true
                    data:
                      code: UPDATED
                      message: Successfully updated the firstSubscriptionDate for the LISA account
                      accountId: '1234567890'
                example-2:
                  value:
                    status: 200
                    success: true
                    data:
                      code: UPDATED_AND_ACCOUNT_VOID
                      message: Successfully updated the firstSubscriptionDate for the LISA account and changed the account status to void because the investor has another account with an earlier firstSubscriptionDate
                      accountId: '1234567891'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                badRequest:
                  $ref: '#/components/examples/invalidLmrn'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                accountVoided:
                  $ref: '#/components/examples/accountVoided'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events:
    post:
      tags:
        - Life Events
      summary: Report a death or terminal illness
      description: |
        Report to HMRC if an investor has been diagnosed with a terminal illness or died. You need to do this to get a lifeEventId before you can request a bonus payment from HMRC.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="35%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Request with a valid payload, LISA Manager reference number and account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Life event created",
            "lifeEventId": "1234567891"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and accountID, but an invalid LISA Manager reference number</p><p class="code--block">lisaManagerReferenceNumber: 123456<br>accountId: 1234567890</p></td>
                                <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid payload and LISA Manager reference number, but an invalid account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234%3D5678</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing invalid and/or missing data</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "Invalid Event Type"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/eventDate"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/eventType"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an event date before 6 April 2017</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-05"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "The eventDate cannot be before 6 April 2017",
              "path": "/eventDate"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing a life event that conflicts with a previously reported event</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000403</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_INAPPROPRIATE",
          "message": "The life event conflicts with a previous life event reported"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been closed</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1000000403</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been cancelled</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 2000000403</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that has already been void</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 3000000403</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an account ID that does not exist</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000404</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with an invalid 'Accept' header</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br><br>Accept: application/vnd.hmrc.1.0</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request containing an already reported event</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000409</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventType": "LISA Investor Terminal Ill Health",
          "eventDate": "2017-04-20"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_ALREADY_EXISTS",
          "message": "The investor’s life event has already been reported",
          "lifeEventId": "1234567891"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>

      operationId: reportDeathOrTerminalIllness
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsRequest'
            example:
              eventType: LISA Investor Terminal Ill Health
              eventDate: 2017-04-20
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsResponse'
              example:
                status: 201
                success: true
                data:
                  message: Life event created
                  lifeEventId: '1234567891'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/badRequest'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                lifeEventInvalid:
                  value:
                    code: LIFE_EVENT_INAPPROPRIATE
                    message: The life event conflicts with a previous life event reported
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                accountVoided:
                  $ref: '#/components/examples/accountVoided'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                lifeEventExists:
                  $ref: '#/components/examples/lifeEventExists'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/annual-returns:
    post:
      tags:
        - Life Events
      summary: Send an annual return of information
      description: |
        Report details to HMRC about LISA accounts you managed in the last tax year. You can also correct a previous return of information. You cannot send or correct a return of information if the investor account is cancelled or void.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="35%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Successfully sent an annual return of information</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Life event created",
            "lifeEventId": "7890000001"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Successfully corrected an annual return of information</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 65,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 65,
          "supersede": {
            "originalLifeEventId": "7890000001",
            "originalEventDate": "2018-04-05"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Life event superseded",
            "lifeEventId": "7890000002"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>LISA manager reference number in the wrong format</p><p class="code--block">lisaManagerReferenceNumber: 123456<br>accountId: 1234567890</p></td>
                                <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Account ID in the wrong format</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234%3D5678</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Wrong or missing data</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "May 2018",
          "taxYear": "2018",
          "marketValueCash": 0,
          "marketValueStocksAndShares": 10.1,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "INVALID_DATA_TYPE",
              "message": "Invalid data type has been used",
              "path": "/taxYear"
            },
            {
              "code": "INVALID_DATA_TYPE",
              "message": "Invalid data type has been used",
              "path": "/marketValueStocksAndShares"
            },
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/eventDate"
            },
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/lisaManagerName"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>A mixture of cash and stocks and shares in the same annual return</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 55,
          "annualSubsStocksAndShares": 0
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "You can only give cash or stocks and shares values",
              "path": "/annualSubsCash"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "You can only give cash or stocks and shares values",
              "path": "/marketValueStocksAndShares"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Tax year before 2017</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2016,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "The taxYear cannot be before 2017",
              "path": "/taxYear"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Tax year in the future</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 3000,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "The taxYear cannot be in the future",
              "path": "/taxYear"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Account cancelled</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 2000000403</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Account void</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 3000000403</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                            <td><p>Account void</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1000000403</p></td>
                            <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "lisaManagerName": "ISA Manager 1",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 56,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                            </td>
                            <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
                <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
                </pre>
                            </td>
                        </tr>
                <tr>
                    <td>
                        <p>Supersede details do not match the original return of information</p>
                        <p class="code--block">
                        lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                        <br>
                        accountId: 5000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 65,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 65,
          "supersede": {
            "originalLifeEventId": "7890000001",
            "originalEventDate": "2018-04-04"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
            "code": "SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR",
            "message": "originalLifeEventId and the originalEventDate do not match the information in the original request"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Account could not be found</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000404</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Accept header is missing or invalid</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br><br>Accept: application/vnd.hmrc.1.0</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Life event already superseded</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1000000409
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 65,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 65,
          "supersede": {
            "originalLifeEventId": "7890000001",
            "originalEventDate": "2018-04-05"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_ALREADY_SUPERSEDED",
          "message": "This life event has already been superseded",
          "lifeEventId": "7890000002"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Life event already exists</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 0000000409</p></td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2018-04-05",
          "lisaManagerName": "Company Name",
          "taxYear": 2018,
          "marketValueCash": 0,
          "marketValueStocksAndShares": 55,
          "annualSubsCash": 0,
          "annualSubsStocksAndShares": 55
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_ALREADY_EXISTS",
          "message": "The investor’s life event has already been reported",
          "lifeEventId": "7890000001"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: sendAnnualReturnOfInformation
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsAnnualReturnsRequest'
            examples:
              initial-return:
                value:
                  eventDate: 2018-04-05
                  lisaManagerName: Company Name
                  taxYear: 2018
                  marketValueCash: 0
                  marketValueStocksAndShares: 55
                  annualSubsCash: 0
                  annualSubsStocksAndShares: 55
              supersede-return:
                value:
                  eventDate: 2018-04-05
                  lisaManagerName: Company Name
                  taxYear: 2018
                  marketValueCash: 0
                  marketValueStocksAndShares: 65
                  annualSubsCash: 0
                  annualSubsStocksAndShares: 65
                  supersede:
                    originalLifeEventId: '7890000001'
                    originalEventDate: 2018-04-05
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsAnnualReturnsResponse'
              examples:
                lifeEventCreated:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Life event created
                      lifeEventId: '7890000001'
                lifeEventSuperseded:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Life event superseded
                      lifeEventId: '7890000002'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/badRequest'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                supersedingLifeEventMisMatchError:
                  $ref: '#/components/examples/supersedingLifeEventMisMatchError'
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                supersedingLifeEventAlreadySuperseded:
                  $ref: '#/components/examples/supersedingLifeEventAlreadySuperseded'
                lifeEventExists:
                  $ref: '#/components/examples/lifeEventExists'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/fund-releases:
    post:
      tags:
        - Life Events
      summary: Request the release of funds to buy a property
      description: | 
        Request the release of LISA funds to buy a property. You can also correct a request by changing the withdrawal amount or property purchase date. When you make a correction, you cannot change the property details or the conveyancer reference number.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="20%">
            <col width="40%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
                <tr>
                      <td>
                          <p>Fund release created</p>
                          <p class="code--block">
                          <strong>lisaManagerReferenceNumber:</strong><br>
                          <a href="#section/Testing">Use your test user profile</a><br>
                           <br>
                                <strong>accountId:</strong><br>1234567890
                          </p>
                       </td>
                 <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                  </td>
                  <td>
                      <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Fund release created",
            "lifeEventId": "3456789000"
          }
        }
        </pre>         
                            </td>
                        </tr>
                        <tr>
                             <td>
                                 <p>Fund release superseded</p>
                                 <p class="code--block">
                                    <strong>lisaManagerReferenceNumber:</strong><br>
                                    <a href="#section/Testing">Use your test user profile</a><br>
                                       <br>
                                           <strong>accountId:</strong><br>1234567890
                                   </p>
                               </td>
                               <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-05",
          "withdrawalAmount": 5000.00,
          "supersede": {
            "originalLifeEventId": "3456789000",
            "originalEventDate": "2017-05-10"
          }
        }
        </pre>
                             </td>
                             <td>
                                 <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Fund release superseded",
            "lifeEventId": "3456789001"
          }
        }
        </pre>
                                    </td>
                                </tr>
                                <tr>
                                            <td>
                                                <p>Invalid LISA Manager Reference Number</p>
                                                <p class="code--block">
                                                   <strong>lisaManagerReferenceNumber:</strong><br> 123456
                                                    <br>
                                                    <br>
                                                    <strong>accountId:</strong><br>1234567890
                                                </p>
                                            </td>
                                            <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                            </td>
                                            <td>
                                                <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                                            </td>
                                            </tr>
                                            <tr>
                                                        <td>
                                                            <p>Invalid Account ID</p>
                                                            <p class="code--block">
                                                                <strong>lisaManagerReferenceNumber:</strong><br>
                                                                <a href="#section/Testing">Use your test user profile</a><br>
                                                                <br>
                                                                <strong>accountId:</strong><br>1234%3D5678
                                                            </p>
                                                        </td>
                                                        <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                        </td>
                                                        <td>
                                                            <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                                                        </td>
                                                    </tr>
                                                    <tr>
                                                          <td>
                                                            <p>Submission has not passed validation</p>
                                                            <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> 123456 <br /> <br /> <strong>accountId:</strong><br />0000000405 </p>
                                                          </td>
                                                          <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                          </td>
                                                          <td>
                                                            <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "INVALID_PAYLOAD",
          "message": "Submission has not passed validation"
        }
        </pre>
                                                          </td>
                                                        </tr>
                                                     <tr>
                                                        <td>
                                                            <p>This LISA account is already closed</p>
                                                            <p class="code--block">
                                                                <strong>lisaManagerReferenceNumber:</strong><br>
                                                                <a href="#section/Testing">Use your test user profile</a><br>
                                                                <br>
                                                                <strong>accountId:</strong><br>1000000403
                                                            </p>
                                                        </td>
         <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                                     </td>
                                                                         <td>
                                                                             <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                                                                         </td>
                                                                     </tr>                                        
                                                                     <tr>
                                                                        <td>
                                                                            <p>This LISA account is already void</p>
                                                                            <p class="code--block">
                                                                            <strong>lisaManagerReferenceNumber:</strong><br>
                                                                            <a href="#section/Testing">Use your test user profile</a><br>
                                                                             <br>
                                                                             <strong>accountId:</strong><br>3000000403
                                                                             </p>
                                                                             </td>
                                                                             <td>
        <pre class="code--block"> 
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }                                                                 
        </pre>
                                                                           </td>
                                                                                <td>
                                                                                    <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                                                                            </td>
                                                                            </tr>   
                                                                            <tr>
                                                                            <td>
                                                                                <p>This LISA account is already cancelled</p>
                                                                                <p class="code--block">
                                                                                <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                <a href="#section/Testing">Use your test user profile</a><br>
                                                                                  <br>
                                                                                      <strong>accountId:</strong><br>2000000403
                                                                                      </p>
                                                                                      </td>
                                                                                      <td>
        <pre class="code--block"> 
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                                                        </td>
                                                                                        <td>
                                                                                           <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                                                                                         </td>
                                                                                         </tr>   
                                                                                             <tr>
                                                                                                 <td>
                                                                                                    <p>Account not open long enough</p>
                                                                                                    <p class="code--block">
                                                                                                    <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                    <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                    <br>
                                                                                                    <strong>accountId:</strong><br>4000000403
                                                                                                    </p>
                                                                                                    </td>
                                                                                                         <td>
        <pre class="code--block"> 
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                                                                    </td>
                                                                                                    <td>
                                                                                                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "COMPLIANCE_ERROR_ACCOUNT_NOT_OPEN_LONG_ENOUGH",
          "message": "The account has not been open for long enough"
        }
        </pre>
                                                                                                     </td>
                                                                                                     </tr>
                                                                                                      <tr>
                                                                                                      <td>
                                                                                                          <p>Other purchase on record</p>
                                                                                                          <p class="code--block">
                                                                                                          <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                          <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                           <br>
                                                                                                            <strong>accountId:</strong><br>6000000403
                                                                                                           </p>
                                                                                                           </td>
                                                                                                           <td>
        <pre class="code--block"> 
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                                                                        </td>
                                                                                                        <td>
                                                                                                             <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
                                                                                                             <pre class="code--block">
        {
          "code": "COMPLIANCE_ERROR_OTHER_PURCHASE_ON_RECORD",
          "message": "Another property purchase is already recorded"
        }
        </pre>
                                                                                                       </td>
                                                                                                       </tr> 
                                                                                                       <tr>
                                                                                                       <td>
                                                                                                          <p>Supersede details do not match the original request</p>
                                                                                                          <p class="code--block">
                                                                                                          <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                          <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                       <br>
                                                                                                          <strong>accountId:</strong><br>5000000403
                                                                                                          </p>
                                                                                                          </td>
                                                                                                          <td>
                                                                                                          <pre class="code--block">
        {
          "eventDate": "2017-06-05",
          "withdrawalAmount": 10000.00,
          "supersede": {
            "originalLifeEventId": "3456789000",
            "originalEventDate": "2017-05-05"
          }
        }
        </pre>
                                                                                                        </td>
                                                                                                        <td>
                                                                                                            <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
                                                                                                            <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR",
          "message": "originalLifeEventId and the originalEventDate do not match the information in the original request"
        }
        </pre>
                                                                                                           </td>
                                                                                                           </tr>
                                                                                                           <tr>
                                                                                                           <td>
                                                                                                               <p>Invalid Data Provided</p>
                                                                                                               <p class="code--block">
                                                                                                               <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                               <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                               <br>
                                                                                                               <strong>accountId:</strong><br>1234567890
                                                                                                               </p>
                                                                                                               </td>
                                                                                                               <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          },
          "supersede": {
            "originalLifeEventId": "3456789000",
            "originalEventDate": "2017-05-05"
          }
        }
        </pre>
                                                                                                                 </td>
                                                                                                                 <td>
                                                                                                                     <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
                                                                                                                 <pre class="code--block">
        {
          "code": "INVALID_DATA_PROVIDED",
          "message": "You can only change eventDate or withdrawalAmount when superseding a property purchase fund release"
        }
        </pre>
                                                                                                                  </td>
                                                                                                                  </tr>  
                                                                                                            <tr>
                                                                                                            <td>
                                                                                                               <p>Account ID does not exist</p>
                                                                                                               <p class="code--block">
                                                                                                               <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                               <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                           <br>
                                                                                                               <strong>accountId:</strong><br>0000000404
                                                                                                               </p>
                                                                                                               </td>
                                                                                                               <td>
                                                                                                               <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                                                                       </td>
                                                                                                       <td>
                                                                                                           <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
                                                                                                           <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                                                                                                      </td>
                                                                                                      </tr>  
                                                                                                      <tr>
                                                                                                      <td>
                                                                                                          <p>The fund release you are superseding has already been superseded</p>
                                                                                                          <p class="code--block">
                                                                                                          <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                          <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                      <br>
                                                                                                      <strong>accountId:</strong><br>1000000409
                                                                                                      </p>
                                                                                                      </td>
                                                                                                           <td>
                                                                                                               <pre class="code--block">
        {
          "eventDate": "2017-05-05",
          "withdrawalAmount": 4000.00,
          "supersede": {
            "originalLifeEventId": "3456789000",
            "originalEventDate": "2017-05-10"
          }
        }
        </pre>
                                                                                                        </td>
                                                                                                             <td>
                                                                                                                 <p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
                                                                                                                 <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_ALREADY_SUPERSEDED",
          "message": "This life event has already been superseded",
          "lifeEventId": "3456789001"
        }
        </pre>
                                                                                         </td>
                                                                                         </tr>
                                                                                         <tr>
                                                                                             <td>
                                                                                                <p>Fund release already exists</p>
                                                                                                <p class="code--block">
                                                                                                <strong>lisaManagerReferenceNumber:</strong><br>
                                                                                                <a href="#section/Testing">Use your test user profile</a><br>
                                                                                                <br>
                                                                                                <strong>accountId:</strong><br>0000000409
                                                                                                </p>
                                                                                                </td>
                                                                                                <td>
                                                                                                    <pre class="code--block">
        {
          "eventDate": "2017-05-10",
          "withdrawalAmount": 4000.00,
          "conveyancerReference": "CR12345-6789",
          "propertyDetails": {
            "nameOrNumber": "1",
            "postalCode": "AA11 1AA"
          }
        }
        </pre>
                                                                                                 </td>
                                                                                                 <td>
                                                                                                     <p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
                                                                                                     <pre class="code--block">
        {
          "code": "LIFE_EVENT_ALREADY_EXISTS",
          "message": "The investor’s life event has already been reported",
          "lifeEventId": "3456789000"
        }
        </pre>
                                                                                                </td>
                                                                                                </tr> 
            </thead>
            </tbody>
        </table>
      operationId: requestReleaseOfFundsToBuyProperty
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsFundReleasesRequest'
            examples:
              example-1:
                value:
                  eventDate: 2017-05-10
                  withdrawalAmount: 4000
                  conveyancerReference: CR12345-6789
                  propertyDetails:
                    nameOrNumber: '1'
                    postalCode: AA11 1AA
              example-2:
                value:
                  eventDate: 2017-05-05
                  withdrawalAmount: 5000
                  supersede:
                    originalLifeEventId: '3456789000'
                    originalEventDate: 2017-05-10
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsFundReleasesResponse'
              examples:
                lifeEventCreated:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Fund release created
                      lifeEventId: '3456789000'
                lifeEventSuperseded:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Fund release superseded
                      lifeEventId: '3456789001'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
                invalidPayLoad:
                  value:
                    code: INVALID_PAYLOAD
                    message: Submission has not passed validation
                emptyNameOrNumber:
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
                    errors:
                    - code: INVALID_NAME_OR_NUMBER
                      message: Enter nameOrNumber
                      path: /propertyDetails/nameOrNumber
                tooLongNameOrNumber:
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
                    errors:
                    - code: INVALID_NAME_OR_NUMBER
                      message: nameOrNumber must be 35 characters or less
                      path: /propertyDetails/nameOrNumber
                invalidNameOrNumber:
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
                    errors:
                    - code: INVALID_NAME_OR_NUMBER
                      message: nameOrNumber must only include letters a to z, numbers 0 to 9, colons, forward slashes, hyphen and spaces
                      path: /propertyDetails/nameOrNumber
                emptyPostalCode:
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
                    errors:
                    - code: INVALID_POSTAL_CODE
                      message: Enter a postcode
                      path: /propertyDetails/postalCode
                invalidPostalCode:
                  value:
                    code: BAD_REQUEST
                    message: Bad Request
                    errors:
                    - code: INVALID_POSTAL_CODE
                      message: Postcode must only include letters a to z and numbers 0 to 9, like AA1 1AA
                      path: /propertyDetails/postalCode
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                complianceCheckNotOpenLongEnough:
                  value:
                    code: COMPLIANCE_ERROR_ACCOUNT_NOT_OPEN_LONG_ENOUGH
                    message: The account has not been open for long enough
                complianceCheckOtherPurchase:
                  value:
                    code: COMPLIANCE_ERROR_OTHER_PURCHASE_ON_RECORD
                    message: Another property purchase is already recorded
                supersedingLifeEventMisMatchError:
                  $ref: '#/components/examples/supersedingLifeEventMisMatchError'
                invalidDataProvided:
                  value:
                    code: INVALID_DATA_PROVIDED
                    message: You can only change eventDate or withdrawalAmount when superseding a property purchase fund release
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                supersedingLifeEventAlreadySuperseded:
                  $ref: '#/components/examples/supersedingLifeEventAlreadySuperseded'
                lifeEventExists:
                  $ref: '#/components/examples/lifeEventExists'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/purchase-extensions:
    post:
      tags:
        - Life Events
      summary: Request a property purchase extension
      description: | 
        Request an extension to your request to release funds to buy a property.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="25%">
            <col width="40%">
            <col width="35%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <p>First purchase extension</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Extension created",
            "lifeEventId": "6789000001"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Superseded first purchase extension</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-11",
          "eventType": "Extension one",
          "supersede": {
            "originalEventDate": "2017-05-10",
            "originalLifeEventId": "6789000001"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Extension superseded",
            "lifeEventId": "6789000002"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Second purchase extension</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-08-10",
          "eventType": "Extension two"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Extension created",
            "lifeEventId": "6789000003"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Superseded second purchase extension</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2017-08-11",
          "eventType": "Extension two",
          "supersede": {
            "originalEventDate": "2017-08-10",
            "originalLifeEventId": "6789000003"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Extension superseded",
            "lifeEventId": "6789000004"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with a valid payload and an invalid LISA Manager reference number</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: 123456
                            <br>
                            accountId: 1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with a valid payload and an invalid account ID</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1234%3D5678
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request containing invalid and/or missing data</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "10-05-2017",
          "eventType": "Extension 1"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/eventDate"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/eventType"
            },
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/fundReleaseId"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The LISA account is already closed</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-08-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The LISA account is already cancelled</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 2000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-08-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The LISA account is already void</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 3000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-08-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>A first extension has not yet been approved</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 7000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-08-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FIRST_EXTENSION_NOT_APPROVED",
          "message": "A first extension has not yet been approved"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>First extension already approved</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 8000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FIRST_EXTENSION_ALREADY_APPROVED",
          "message": "A first extension has already been approved",
          "lifeEventId": "6789000001"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Second extension already approved</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 9000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-08-10",
          "eventType": "Extension two"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "SECOND_EXTENSION_ALREADY_APPROVED",
          "message": "A second extension has already been approved",
          "lifeEventId": "6789000003"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Supersede details do not match the original request</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 5000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-11",
          "eventType": "Extension one",
          "supersede": {
            "originalEventDate": "2017-05-10",
            "originalLifeEventId": "6789000001"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR",
          "message": "originalLifeEventId and the originalEventDate do not match the information in the original request"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Account not found</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 0000000404
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Fund release not found</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1000000404
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "FUND_RELEASE_NOT_FOUND",
          "message": "The fundReleaseId does not match HMRC’s records"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Extension already exists</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 0000000409
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_ALREADY_EXISTS",
          "message": "The investor’s life event has already been reported",
          "lifeEventId": "6789000001"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The associated fund release has been superseded</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 2000000409
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789000",
          "eventDate": "2017-05-10",
          "eventType": "Extension one"
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "FUND_RELEASE_SUPERSEDED",
          "message": "This fund release has already been superseded"
          "lifeEventId": "3456789001"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The extension you are superseding has already been superseded</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a>
                            <br>
                            accountId: 1000000409
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "eventDate": "2017-05-11",
          "eventType": "Extension one",
          "supersede": {
            "originalEventDate": "2017-05-10",
            "originalLifeEventId": "6789000001"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_ALREADY_SUPERSEDED",
          "message": "This life event has already been superseded",
          "lifeEventId": "6789000002"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: requestPropertyPurchaseExtension
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsPurchaseExtensionsRequest'
            examples:
              example-1:
                value:
                  fundReleaseId: '3456789001'
                  eventDate: 2017-05-10
                  eventType: Extension one
              example-2:
                value:
                  eventDate: 2017-05-11
                  eventType: Extension one
                  supersede:
                    originalEventDate: 2017-05-10
                    originalLifeEventId: '6789000001'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsPurchaseExtensionsResponse'
              examples:
                lifeEventCreated:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Extension created
                      lifeEventId: '6789000001'
                lifeEventSuperseded:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Extension superseded
                      lifeEventId: '6789000002'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
                extensionNotApproved:
                  value:
                    code: FIRST_EXTENSION_NOT_APPROVED
                    message: A first extension has not yet been approved
                firstExtensionAlreadyApproved:
                  value:
                    code: FIRST_EXTENSION_ALREADY_APPROVED
                    message: A first extension has already been approved
                secondExtensionAlreadyApproved:
                  value:
                    code: SECOND_EXTENSION_ALREADY_APPROVED
                    message: A second extension has already been approved
                supersedingLifeEventMisMatchError:
                  $ref: '#/components/examples/supersedingLifeEventMisMatchError'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
                fundReleaseNotFound:
                  $ref: '#/components/examples/fundReleaseNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                lifeEventExists:
                  $ref: '#/components/examples/lifeEventExists'
                fundReleaseLifeEventAlreadySuperseded:
                  $ref: '#/components/examples/fundReleaseLifeEventAlreadySuperseded'
                supersedingLifeEventAlreadySuperseded:
                  $ref: '#/components/examples/supersedingLifeEventAlreadySuperseded'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/purchase-outcomes:
    post:
      tags:
        - Life Events
      summary: Report the outcome of a property purchase
      description: | 
        Report to HMRC if a property purchase was completed or failed.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
          <colgroup>
            <col width="20%" />
            <col width="40%" />
            <col width="40%" />
          </colgroup>
          <thead>
            <tr>
              <th>Scenario</th>
              <th>Request Payload</th>
              <th>Response</th>
            </tr>
            <tr>
              <td>
                <p>Successful purchase outcome</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />1234567890 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }             
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
                <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Purchase outcome created",
            "lifeEventId": "5678900001"
          }
        }               
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase outcome superseded</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />1234567890 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "eventDate": "2017-10-05",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000,
          "supersede": {
            "originalLifeEventId": "5678900001",
            "originalEventDate": "2017-10-10"
          }
        }                
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
                <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Purchase outcome superseded",
            "lifeEventId": "5678900002"
          }
        }        
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Failed purchase outcome</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />1234567891 </p>
              </td>
              <td>
        <pre class="code--block">
        {
          "fundReleaseId": "3456789002",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase failed"
        }
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Purchase outcome created",
            "lifeEventId": "5678900003"
          }
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Invalid LISA Manager Reference Number</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> 123456 <br /> <br /> <strong>accountId:</strong><br />1234567890 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }       
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
                <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Invalid Account ID</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />1234%3D5678 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }                                   
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
                <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }                                  
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Supersede details do not match the original request</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />5000000403 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "eventDate": "2017-10-05",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000,
          "supersede": {
            "originalLifeEventId": "5678900000",
            "originalEventDate": "2017-10-10"
          }
        }    
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
                <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR",
          "message": "originalLifeEventId and the originalEventDate do not match the information in the original request"
        }  
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Fund release not found</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />1000000404 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }                                    
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
                <pre class="code--block">
        {
          "code" : "FUND_RELEASE_NOT_FOUND",
          "message" : "The fundReleaseId does not match HMRC’s records"
        }                                                                                
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Investor account not found</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />0000000404 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }  
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">404 (Not found)</code></p>
                <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }                                               
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>The purchase outcome you are superseding has already been superseded</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />1000000409 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "eventDate": "2017-10-05",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000,
          "supersede": {
            "originalLifeEventId": "5678900001",
            "originalEventDate": "2017-10-10"
          }
        }       
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
                <pre class="code--block">
        {
          "code": "SUPERSEDED_LIFE_EVENT_ALREADY_SUPERSEDED",
          "message": "This life event has already been superseded",
          "lifeEventId": "5678900002"
        }                        
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase outcome already exists</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />0000000409 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789001",
          "eventDate": "2017-10-10",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }                                                     
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
                <pre class="code--block">
        {
          "code": "LIFE_EVENT_ALREADY_EXISTS",
          "message": "The investor’s life event has already been reported",
          "lifeEventId": "5678900001"
        }                                               
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>The associated fund release has been superseded</p>
                <p class="code--block"> <strong>lisaManagerReferenceNumber:</strong><br /> <a href="#section/Testing">Use your test user profile</a><br /> <br /> <strong>accountId:</strong><br />2000000409 </p>
              </td>
              <td>
                <pre class="code--block">
        {
          "fundReleaseId": "3456789000",
          "eventDate": "2017-10-05",
          "propertyPurchaseResult": "Purchase completed",
          "propertyPurchaseValue": 250000
        }
        </pre>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
                <pre class="code--block">
        {
          "code": "FUND_RELEASE_SUPERSEDED",
          "message": "This fund release has already been superseded",
          "lifeEventId": "3456789001"
        }                                               
        </pre>
              </td>
            </tr>
          </thead>
        </table>
      operationId: reportOutcomeOfPropertyPurchase
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsPurchaseOutcomesRequest'
            examples:
              example-1:
                value:
                  fundReleaseId: '3456789001'
                  eventDate: 2017-10-10
                  propertyPurchaseResult: Purchase completed
                  propertyPurchaseValue: 250000
              example-2:
                value:
                  eventDate: 2017-10-05
                  propertyPurchaseResult: Purchase completed
                  propertyPurchaseValue: 250000
                  supersede:
                    originalLifeEventId: '5678900001'
                    originalEventDate: 2017-10-10
              example-3:
                value:
                  fundReleaseId: '3456789002'
                  eventDate: 2017-05-05
                  propertyPurchaseResult: Purchase failed
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsPurchaseOutcomesResponse'
              examples:
                lifeEventCreated:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Purchase outcome created
                      lifeEventId: '5678900001'
                lifeEventSuperseded:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Purchase outcome superseded
                      lifeEventId: '5678900002'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                mismatchError:
                  value:
                    code: SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR
                    message: originalLifeEventId and the originalEventDate do not match the information in the original request
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountNotFound:
                  value:
                    code: INVESTOR_ACCOUNTID_NOT_FOUND
                    message: The accountId does not match with HMRC’s records
                fundReleaseNotFound:
                  $ref: '#/components/examples/fundReleaseNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                fundReleaseLifeEventAlreadySuperseded:
                  $ref: '#/components/examples/fundReleaseLifeEventAlreadySuperseded'
                supersedingLifeEventAlreadySuperseded:
                  $ref: '#/components/examples/supersedingLifeEventAlreadySuperseded'
                lifeEventExists:
                  $ref: '#/components/examples/lifeEventExists'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/events/{lifeEventId}:
    get:
      tags:
        - Life Events
      summary: View a life event
      description: | 
        View life event data that has been submitted to HMRC. You can view death and terminal illness, property purchase funds release, property purchase extension, property purchase outcome, and annual return of information.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
          <col width="40%">
          <col width="60%">
          <thead>
            <tr>
              <th>Scenario</th>
              <th>Response</th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td>
                <p>Terminal illness life event</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 1234567891
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "1234567891",
            "eventType" : "LISA Investor Terminal Ill Health",
            "eventDate" : "2017-04-20"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Annual return of information which has been superseded</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 7890000001
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "7890000001",
            "eventType": "Statutory Submission",
            "eventDate": "2018-04-05",
            "lisaManagerName": "Company Name",
            "taxYear": 2018,
            "marketValueCash": 0,
            "marketValueStocksAndShares": 55,
            "annualSubsCash": 0,
            "annualSubsStocksAndShares": 55,
            "supersededBy": "7890000002"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Annual return of information which supersedes another</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 7890000002
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "7890000002",
            "eventType": "Statutory Submission",
            "eventDate": "2018-04-05",
            "lisaManagerName": "Company Name",
            "taxYear": 2018,
            "marketValueCash": 0,
            "marketValueStocksAndShares": 65,
            "annualSubsCash": 0,
            "annualSubsStocksAndShares": 65,
            "supersede": {
              "originalLifeEventId": "7890000001",
              "originalEventDate": "2018-04-05"
            }
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Funds release which has been superseded</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 3456789000
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "3456789000",
            "eventType": "Funds release",
            "eventDate": "2017-05-10",
            "withdrawalAmount": 4000.00,
            "conveyancerReference": "CR12345-6789",
            "propertyDetails": {
              "nameOrNumber": "1",
              "postalCode": "AA11 1AA"
            },
            "supersededBy": "3456789001"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Funds release which has associated data and successful outcome</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 3456789001
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "3456789001",
            "eventType": "Funds release",
            "eventDate": "2017-05-05",
            "withdrawalAmount": 5000.00,
            "conveyancerReference": "CR12345-6789",
            "propertyDetails": {
              "nameOrNumber": "1",
              "postalCode": "AA11 1AA"
            },
            "supersede": {
              "originalLifeEventId": "3456789000",
              "originalEventDate": "2017-05-10"
            }
          },
          {
            "lifeEventId": "6789000002",
            "eventType": "Extension one",
            "eventDate": "2017-05-11",
            "fundReleaseId": "3456789001",
            "supersede": {
              "originalLifeEventId": "6789000001",
              "originalEventDate": "2017-05-10"
            }
          },
          {
            "lifeEventId": "6789000004",
            "eventType": "Extension two",
            "eventDate": "2017-08-11",
            "fundReleaseId": "3456789001",
            "supersede": {
              "originalLifeEventId": "6789000003",
              "originalEventDate": "2017-08-10"
            }
          },
          {
            "lifeEventId": "5678900002",
            "eventType": "Purchase outcome",
            "eventDate": "2017-10-10",
            "fundReleaseId": "3456789001",
            "propertyPurchaseValue": 250000,
            "propertyPurchaseResult": "Purchase completed",
            "supersede": {
              "originalLifeEventId": "5678900001",
              "originalEventDate": "2017-10-05"
            }
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Funds release with failure outcome</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567891<br>
                  lifeEventId: 3456789002
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "3456789002",
            "eventType": "Funds release",
            "eventDate": "2017-05-05",
            "withdrawalAmount": 5000.00,
            "conveyancerReference": "CR12345-6789",
            "propertyDetails": {
              "nameOrNumber": "1",
              "postalCode": "AA11 1AA"
            },
            "supersede": {
              "originalLifeEventId": "3456789000",
              "originalEventDate": "2017-05-10"
            }
          },
          {
            "lifeEventId": "5678900003",
            "eventType": "Purchase outcome",
            "eventDate": "2017-10-10",
            "fundReleaseId": "3456789002",
            "propertyPurchaseResult": "Purchase failed"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase extension one which has been superseded</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 6789000001
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "6789000001",
            "eventType": "Extension one",
            "eventDate": "2017-05-10",
            "fundReleaseId": "3456789001",
            "supersededBy": "6789000002"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase extension one which supersedes another</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 6789000002
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "6789000002",
            "eventType": "Extension one",
            "eventDate": "2017-05-11",
            "fundReleaseId": "3456789001",
            "supersede": {
              "originalLifeEventId": "6789000001",
              "originalEventDate": "2017-05-10"
            }
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase extension two which has been superseded</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 6789000003
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "6789000003",
            "eventType": "Extension two",
            "eventDate": "2017-08-10",
            "fundReleaseId": "3456789001",
            "supersededBy": "6789000004"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase extension two which supersedes another</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 6789000004
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "6789000004",
            "eventType": "Extension two",
            "eventDate": "2017-08-11",
            "fundReleaseId": "3456789001",
            "supersede": {
              "originalLifeEventId": "6789000003",
              "originalEventDate": "2017-08-10"
            }
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase outcome which has been superseded</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 5678900001
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "5678900001",
            "eventType": "Purchase outcome",
            "eventDate": "2017-10-05",
            "fundReleaseId": "3456789001",
            "propertyPurchaseValue": 250000,
            "propertyPurchaseResult": "Purchase completed",
            "supersededBy": "5678900002"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase outcome which supersedes another</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 5678900002
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "5678900002",
            "eventType": "Purchase outcome",
            "eventDate": "2017-10-10",
            "fundReleaseId": "3456789001",
            "propertyPurchaseValue": 250000,
            "propertyPurchaseResult": "Purchase completed",
            "supersede": {
              "originalLifeEventId": "5678900001",
              "originalEventDate": "2017-10-05"
            }
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Purchase outcome failure</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567891<br>
                  lifeEventId: 5678900003
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        [
          {
            "lifeEventId": "5678900003",
            "eventType": "Purchase outcome",
            "eventDate": "2017-10-10",
            "fundReleaseId": "3456789002",
            "propertyPurchaseResult": "Purchase failed"
          }
        ]
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>lisaManagerReferenceNumber is in the wrong format</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: 123456<br>
                  accountId: 1234567890<br>
                  lifeEventId: 1234567891
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
          {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
          }
        </pre>
                </td>
            </tr>
            <tr>
                <td>
                  <p>accountId is in the wrong format</p>
                  <p class="code--block">
                    lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                    accountId: 1234%3D5678<br>
                    lifeEventId: 1234567891
                  </p>
                </td>
                <td>
                  <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
          }
        </pre>
                </td>
            </tr>
            <tr>
              <td>
                <p>Account not found</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 0000000404<br>
                  lifeEventId: 1234567891
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
              </td>
            </tr>
            <tr>
              <td>
                <p>Life event not found</p>
                <p class="code--block">
                  lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                  accountId: 1234567890<br>
                  lifeEventId: 0000000404
                </p>
              </td>
              <td>
                <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_NOT_FOUND",
          "message": "The lifeEventId does not match with HMRC’s records"
        }
        </pre>
              </td>
            </tr>
          </tbody>
        </table>
      operationId: viewLifeEvent
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/lifeEventId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                maxItems: 4
                minItems: 1
                uniqueItems: true
                type: array
                items:
                  $ref: '#/components/schemas/lifetimeIsaManagerAccountsEventsLifeEventIdResponse'
              examples:
                ill:
                  value:
                  - lifeEventId: '1234567891'
                    eventType: LISA Investor Terminal Ill Health
                    eventDate: 2017-04-20
                return:
                  value:
                  - lifeEventId: '7890000001'
                    eventType: Statutory Submission
                    eventDate: 2018-04-05
                    lisaManagerName: Company Name
                    taxYear: 2018
                    marketValueCash: 0
                    marketValueStocksAndShares: 55
                    annualSubsCash: 0
                    annualSubsStocksAndShares: 55
                    supersededBy: '7890000002'
                property:
                  value:
                  - lifeEventId: '3456789001'
                    eventType: Funds release
                    eventDate: 2017-05-05
                    withdrawalAmount: 5000
                    conveyancerReference: CR12345-6789
                    propertyDetails:
                      nameOrNumber: '1'
                      postalCode: AA11 1AA
                    supersede:
                      originalLifeEventId: '3456789000'
                      originalEventDate: 2017-05-10
                  - lifeEventId: '6789000002'
                    eventType: Extension one
                    eventDate: 2017-05-11
                    fundReleaseId: '3456789001'
                    supersede:
                      originalEventDate: 2017-05-10
                      originalLifeEventId: '6789000001'
                  - lifeEventId: '6789000004'
                    eventType: Extension two
                    eventDate: 2017-08-11
                    fundReleaseId: '3456789001'
                    supersede:
                      originalEventDate: 2017-08-10
                      originalLifeEventId: '6789000003'
                  - lifeEventId: '5678900002'
                    eventType: Purchase outcome
                    eventDate: 2017-06-10
                    fundReleaseId: '3456789001'
                    propertyPurchaseValue: 250000
                    propertyPurchaseResult: Purchase completed
                    supersede:
                      originalLifeEventId: '5678900001'
                      originalEventDate: 2017-05-05
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noTransaction:
                  value:
                    code: LIFE_EVENT_NOT_FOUND
                    message: Enter a real lifeEventId
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/withdrawal-charges:
    post:
      tags:
        - Withdrawal Charges
      summary: Report a withdrawal charge
      description: | 
        Tell HMRC that an investor has taken money out of a LISA account without an associated life event. You can also correct a previous withdrawal charge.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="20%">
            <col width="40%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <p>Unauthorised withdrawal transaction created</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Unauthorised withdrawal transaction created",
            "transactionId": "2345678901"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Unauthorised withdrawal transaction created - late notification</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567891
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Unauthorised withdrawal transaction created - late notification",
            "transactionId": "2345678902"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Unauthorised withdrawal transaction superseded</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 2000.00,
          "withdrawalChargeAmount": 500.00,
          "withdrawalChargeAmountYTD": 750.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Superseded withdrawal",
          "automaticRecoveryAmount": 500.00,
          "supersede": {
            "originalTransactionId": "2345678901",
            "originalWithdrawalChargeAmount": 250.00,
            "transactionResult": 250.00,
            "reason": "Additional withdrawal"
          }
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Unauthorised withdrawal transaction superseded",
            "transactionId": "2345678903"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Invalid and/or missing data</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": 6,
          "claimPeriodEndDate": "1st May",
          "withdrawalAmount": 1000.001,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal.",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/withdrawalChargeAmount"
            },
            {
              "code": "INVALID_DATA_TYPE",
              "message": "Invalid data type has been used",
              "path": "/claimPeriodStartDate"
            },
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/claimPeriodEndDate"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "Amount cannot be negative, and can only have up to 2 decimal places",
              "path": "/withdrawalAmount"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/withdrawalReason"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Invalid LISA Manager Reference Number</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br> 123456
                            <br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Invalid Account ID</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234%3D5678
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>

                <tr>
                    <td>
                        <p>Invalid monetary amounts and/or invalid dates</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-05",
          "claimPeriodEndDate": "2018-12-06",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 251.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
            "code": "FORBIDDEN",
            "message": "There is a problem with the request data",
            "errors": [
                {
                    "code": "INVALID_DATE",
                    "message": "The claimPeriodStartDate must be the 6th day of the month",
                    "path": "/claimPeriodStartDate"
                },
                {
                    "code": "INVALID_DATE",
                    "message": "The claimPeriodEndDate must be the 5th day of the month which occurs after the claimPeriodStartDate",
                    "path": "/claimPeriodEndDate"
                },
                {
                    "code": "AMOUNT_MISMATCH",
                    "message": "automaticRecoveryAmount and withdrawalChargeAmount must be the same",
                    "path": "/automaticRecoveryAmount"
                },
                {
                    "code": "INVALID_MONETARY_AMOUNT",
                    "message": "automaticRecoveryAmount cannot be more than withdrawalChargeAmount",
                    "path": "/automaticRecoveryAmount"
                }
            ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>This LISA account is already cancelled</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
          "message": "The LISA account is already cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>This LISA account is already void</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>2000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
          "message": "The LISA account is already void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>A superseded withdrawal report cannot be matched to the original</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>3000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 2000.00,
          "withdrawalChargeAmount": 500.00,
          "withdrawalChargeAmountYTD": 750.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Superseded withdrawal",
          "automaticRecoveryAmount": 500.00,
          "supersede": {
            "originalTransactionId": "2345678901",
            "originalWithdrawalChargeAmount": 250.00,
            "transactionResult": 250.00,
            "reason": "Additional withdrawal"
          }
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "SUPERSEDED_WITHDRAWAL_CHARGE_ID_AMOUNT_MISMATCH",
          "message": "originalTransactionId and the originalWithdrawalChargeAmount do not match the information in the original request"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The withdrawal charge has already been superseded</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>4000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 2000.00,
          "withdrawalChargeAmount": 500.00,
          "withdrawalChargeAmountYTD": 750.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Superseded withdrawal",
          "automaticRecoveryAmount": 500.00,
          "supersede": {
            "originalTransactionId": "2345678901",
            "originalWithdrawalChargeAmount": 250.00,
            "transactionResult": 250.00,
            "reason": "Additional withdrawal"
          }
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "WITHDRAWAL_CHARGE_ALREADY_SUPERSEDED",
          "message": "This withdrawal charge has already been superseded",
          "transactionId": "2345678901"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The calculation from your superseded withdrawal charge is incorrect</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>5000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 2000.00,
          "withdrawalChargeAmount": 500.00,
          "withdrawalChargeAmountYTD": 750.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Superseded withdrawal",
          "automaticRecoveryAmount": 500.00,
          "supersede": {
            "originalTransactionId": "2345678901",
            "originalWithdrawalChargeAmount": 250.00,
            "transactionResult": 250.00,
            "reason": "Additional withdrawal"
          }
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "SUPERSEDED_WITHDRAWAL_CHARGE_OUTCOME_ERROR",
          "message": "The calculation from your superseded withdrawal charge is incorrect"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The withdrawal charge as a percentage of the withdrawal amount is incorrect. 
                        For withdrawals made between 06/03/2020 and 05/04/2021 the withdrawal charge is 20%. For all other withdrawals it is 25%.</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>6000000403
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 2000.00,
          "withdrawalChargeAmount": 500.00,
          "withdrawalChargeAmountYTD": 750.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Superseded withdrawal",
          "automaticRecoveryAmount": 500.00,
          "supersede": {
            "originalTransactionId": "2345678901",
            "originalWithdrawalChargeAmount": 250.00,
            "transactionResult": 250.00,
            "reason": "Additional withdrawal"
          }
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "WITHDRAWAL_REPORTING_ERROR",
          "message": "The withdrawal charge as a percentage of the withdrawal amount is incorrect. For withdrawals made between 06/03/2020 and 05/04/2021 the withdrawal charge is 20%. For all other withdrawals it is 25%."
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Account ID does not exist</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>0000000404
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>The accept header is invalid</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <br>
                            <strong>Accept:</strong><br> application/vnd.hmrc.1.0
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Withdrawal charge has already been reported</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>0000000409
                        </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "withdrawalAmount": 1000.00,
          "withdrawalChargeAmount": 250.00,
          "withdrawalChargeAmountYTD": 500.00,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "automaticRecoveryAmount": 250.00
        }
        </pre>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class="code--block">
        {
          "code": "WITHDRAWAL_CHARGE_ALREADY_EXISTS",
          "message": "A withdrawal charge with these details has already been requested for this investor",
          "transactionId": "2345678901"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: reportWithdrawalCharge
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsWithdrawalChargesRequest'
            examples:
              example-1:
                value:
                  claimPeriodStartDate: 2017-12-06
                  claimPeriodEndDate: 2018-01-05
                  withdrawalAmount: 1000
                  withdrawalChargeAmount: 250
                  withdrawalChargeAmountYTD: 500
                  fundsDeductedDuringWithdrawal: true
                  withdrawalReason: Regular withdrawal
                  automaticRecoveryAmount: 250
              example-2:
                value:
                  claimPeriodStartDate: 2017-12-06
                  claimPeriodEndDate: 2018-01-05
                  withdrawalAmount: 2000
                  withdrawalChargeAmount: 500
                  withdrawalChargeAmountYTD: 750
                  fundsDeductedDuringWithdrawal: true
                  withdrawalReason: Superseded withdrawal
                  automaticRecoveryAmount: 500
                  supersede:
                    originalTransactionId: '2345678901'
                    originalWithdrawalChargeAmount: 250
                    transactionResult: 250
                    reason: Additional withdrawal
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsWithdrawalChargesResponse'
              examples:
                example-1:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Unauthorised withdrawal transaction created
                      transactionId: '2345678901'
                example-2:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Unauthorised withdrawal transaction created - late notification
                      transactionId: '2345678902'
                example-3:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Unauthorised withdrawal transaction superseded
                      transactionId: '2345678903'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                badRequest:
                  $ref: '#/components/examples/invalidLmrn'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                forbidden:
                  value:
                    code: FORBIDDEN
                    message: There is a problem with the request data
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
                supersededMismatch:
                  value:
                    code: SUPERSEDED_WITHDRAWAL_CHARGE_ID_AMOUNT_MISMATCH
                    message: originalTransactionId and the originalWithdrawalChargeAmount do not match the information in the original request
                alreadySuperseded:
                  value:
                    code: WITHDRAWAL_CHARGE_ALREADY_SUPERSEDED
                    message: This withdrawal charge has already been superseded
                    transactionId: '2345678901'
                supersededOutcomeError:
                  value:
                    code: SUPERSEDED_WITHDRAWAL_CHARGE_OUTCOME_ERROR
                    message: The calculation from your superseded withdrawal charge is incorrect
                timescalesExceeded:
                  value:
                    code: WITHDRAWAL_CHARGE_TIMESCALES_EXCEEDED
                    message: The timescale for reporting a withdrawal charge has passed. The claim period lasts for 6 years and 14 days
                reportingError:
                  value:
                    code: WITHDRAWAL_REPORTING_ERROR
                    message: The withdrawal charge as a percentage of the withdrawal amount is incorrect. For withdrawals made between 06/03/2020 and 05/04/2021 the withdrawal charge is 20%. For all other withdrawals it is 25%.
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                withdrawalChargeExists:
                  value:
                    code: WITHDRAWAL_CHARGE_ALREADY_EXISTS
                    message: A withdrawal charge with these details has already been requested for this investor
                    transactionId: '2345678901'
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/withdrawal-charges/{transactionId}:
    get:
      tags:
        - Withdrawal Charges
      summary: Get details of a withdrawal charge
      description: | 
        Use an investor’s transaction ID to get a request for a withdrawal charge that has been submitted to HMRC.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="40%">
            <col width="60%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <p>Withdrawal transaction which has been superseded</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <strong>transactionId:</strong><br>2345678901
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">200 (OK)</code></p>            
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "automaticRecoveryAmount": 250,
          "withdrawalAmount": 1000,
          "withdrawalChargeAmount": 250,
          "withdrawalChargeAmountYTD": 500,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal",
          "supersededBy": "2345678903"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Withdrawal transaction which has not been superseded</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <strong>transactionId:</strong><br>2345678902
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">200 (OK)</code></p>            
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "automaticRecoveryAmount": 250,
          "withdrawalAmount": 1000,
          "withdrawalChargeAmount": 250,
          "withdrawalChargeAmountYTD": 500,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Regular withdrawal"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Withdrawal transaction which supersedes another</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <strong>transactionId:</strong><br>2345678903
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">200 (OK)</code></p>            
        <pre class="code--block">
        {
          "claimPeriodStartDate": "2017-12-06",
          "claimPeriodEndDate": "2018-01-05",
          "automaticRecoveryAmount": 250,
          "withdrawalAmount": 2000,
          "withdrawalChargeAmount": 500,
          "withdrawalChargeAmountYTD": 750,
          "fundsDeductedDuringWithdrawal": true,
          "withdrawalReason": "Superseded withdrawal",
          "supersede": {
            "originalTransactionId": "2345678901",
            "originalWithdrawalChargeAmount": 250,
            "transactionResult": 250,
            "reason": "Additional withdrawal"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Invalid LISA Manager Reference Number</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br> 123456
                            <br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <strong>transactionId:</strong><br>2345678901
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Invalid Account ID</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234%3D5678
                            <br>
                            <strong>transactionId:</strong><br>2345678901
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Account ID does not exist</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <strong>transactionId:</strong><br>1000000404
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Transaction ID does not exist</p>
                        <p class="code--block">
                            <strong>lisaManagerReferenceNumber:</strong><br>
                            <a href="#section/Testing">Use your test user profile</a><br>
                            <br>
                            <strong>accountId:</strong><br>1234567890
                            <br>
                            <strong>transactionId:</strong><br>0000000404
                        </p>
                    </td>
                    <td>
                        <p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "WITHDRAWAL_CHARGE_TRANSACTION_NOT_FOUND",
          "message": "transactionId does not match HMRC’s records"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: getDetailsOfWithdrawalCharge
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/transactionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsWithdrawalChargesTransactionIdResponse'
              examples:
                example:
                  value:
                    claimPeriodStartDate: 2017-12-06
                    claimPeriodEndDate: 2018-01-05
                    automaticRecoveryAmount: 250
                    withdrawalAmount: 1000
                    withdrawalChargeAmount: 250
                    withdrawalChargeAmountYTD: 500
                    fundsDeductedDuringWithdrawal: true
                    withdrawalReason: Regular withdrawal
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noTransaction:
                  value:
                    code: WITHDRAWAL_CHARGE_TRANSACTION_NOT_FOUND
                    message: The transactionId does not match HMRC’s records
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/transactions:
    post:
      tags:
        - Bonus Requests
      summary: Request a bonus payment
      description: |
        Request a bonus payment from HMRC and provide a reason for the request. You can also correct a bonus claim during or after the claim reporting period. You can repay any overpaid amounts to HMRC and receive additional payments from corrected claims.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="20%">
            <col width="40%">
            <col width="40%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Request Payload</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                      <p>Request with a valid payload, LISA Manager reference number and account ID</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Bonus transaction created",
            "transactionId": "0123456789"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request with a valid payload, LISA Manager reference number and account ID (late notification)</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567891
                      </p>
                    </td>
                    <td>
        <pre class ="code--block">
        {
          "lifeEventId": "1234567800",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Bonus transaction created - late notification",
            "transactionId": "0023456789"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request with a valid payload, LISA Manager reference number and account ID (regular bonus)</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Regular Bonus"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Bonus transaction created",
            "transactionId": "0003456789"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Superseded transaction - Bonus recovery</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "automaticRecoveryAmount": 1000.00,
            "originalTransactionId": "0123456789",
            "originalBonusDueForPeriod": 1000.00,
            "transactionResult": -1000.00,
            "reason": "Bonus recovery"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Bonus transaction superseded",
            "transactionId": "0000456789"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Superseded transaction - Additional bonus</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "originalTransactionId": "0003456789",
            "originalBonusDueForPeriod": 4000.00,
            "transactionResult": 4000.00,
            "reason": "Additional bonus"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">201 (Created)</code></p>
        <pre class="code--block">
        {
          "status": 201,
          "success": true,
          "data": {
            "message": "Bonus transaction superseded",
            "transactionId": "0000056789"
          }
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request with a valid payload and account ID, but an invalid LISA Manager reference number</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        123456<br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class ="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request with a valid payload and LISA Manager reference number, but an invalid account ID</p>
                      <p class ="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234%3D5678
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                                </td>
                </tr>
                <tr>
                	 <td>
                    <p>Request containing invalid and/or missing data</p>
                    <p class="code--block">
                      <strong>lisaManagerReferenceNumber:</strong><br>
                      <a href="#section/Testing">Use your test user profile</a><br>
                      <br>
                      <strong>accountId:</strong><br>
                      1234567890
                    </p>
                  </td>
        	        <td>
        <pre class="code--block">
        {
          "lifeEventId": true,
          "periodStartDate": "2017-04-06",
          "periodEndDate": "05-05-2017",
          "htbTransfer": {
            "htbTransferInForPeriod": 5.50,
            "htbTransferTotalYTD": 5.5001
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "claimReason": "X"
          },
          "supersede": {
            "originalTransactionId": "ABC123",
            "originalBonusDueForPeriod": true,
            "transactionResult": -10.005,
            "reason": "Recovery"
          }
        }
        </pre>
        	        </td>
        	        <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Bad Request",
          "errors": [
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "Amount cannot be negative, and can only have up to 2 decimal places",
              "path": "/htbTransfer/htbTransferTotalYTD"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/supersede/reason"
            },
            {
              "code": "INVALID_DATA_TYPE",
              "message": "Invalid data type has been used",
              "path": "/lifeEventId"
            },
            {
              "code": "MISSING_FIELD",
              "message": "This field is required",
              "path": "/bonuses/totalBonusDueYTD"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/supersede/originalTransactionId"
            },
            {
              "code": "INVALID_FORMAT",
              "message": "Invalid format has been used",
              "path": "/bonuses/claimReason"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "Amount can only have up to 2 decimal places",
              "path": "/supersede/transactionResult"
            },
            {
              "code": "INVALID_DATA_TYPE",
              "message": "Invalid data type has been used",
              "path": "/supersede/originalBonusDueForPeriod"
            },
            {
              "code": "INVALID_DATE",
              "message": "Date is invalid",
              "path": "/periodEndDate"
            }
          ]
        }
        </pre>
        	        </td>
                </tr>
                <tr>
                    <td>
                      <p>Request with invalid monetary amounts and/or invalid dates</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "9999-04-05",
          "periodEndDate": "2016-06-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 0.00,
            "newSubsYTD": 0.00,
            "totalSubsForPeriod": 0.0,
            "totalSubsYTD": 0.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 0.0,
            "totalBonusDueYTD": 0.0,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "There is a problem with the request data",
          "errors": [
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "newSubsForPeriod and htbTransferInForPeriod cannot both be 0",
              "path": "/inboundPayments/newSubsForPeriod"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "newSubsForPeriod and htbTransferInForPeriod cannot both be 0",
              "path": "/htbTransfer/htbTransferInForPeriod"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "totalSubsForPeriod must be more than 0",
              "path": "/inboundPayments/totalSubsForPeriod"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "bonusDueForPeriod must be more than 0",
              "path": "/bonuses/bonusDueForPeriod"
            },
            {
              "code": "INVALID_MONETARY_AMOUNT",
              "message": "totalBonusDueYTD must be more than 0",
              "path": "/bonuses/totalBonusDueYTD"
            },
            {
              "code": "INVALID_DATE",
              "message": "The periodStartDate must be the 6th day of the month",
              "path": "/periodStartDate"
            },
            {
              "code": "INVALID_DATE",
              "message": "The periodEndDate must be the 5th day of the month which occurs after the periodStartDate",
              "path": "/periodEndDate"
            },
            {
              "code": "INVALID_DATE",
              "message": "The periodStartDate may not be a future date",
              "path": "/periodStartDate"
            },
            {
              "code": "INVALID_DATE",
              "message": "The periodEndDate cannot be before 6 April 2017",
              "path": "/periodEndDate"
            }
          ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                	 <td>
                    <p>Request with a 'claimReason' of 'Life Event', but without a lifeEventId</p>
                    <p class="code--block">
                      <strong>lisaManagerReferenceNumber:</strong><br>
                      <a href="#section/Testing">Use your test user profile</a><br>
                      <br>
                      <strong>accountId:</strong><br>
                      1234567890
                    </p>
                   </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
        	        <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_NOT_PROVIDED",
          "message": "lifeEventId is required when the claimReason is a life event"
        }
        </pre>
        	        </td>
                </tr>
               <tr>
                    <td>
                      <p>Request containing invalid bonus payment figures</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        0000000403
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567801",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "BONUS_CLAIM_ERROR",
          "message": "The bonus amount given is above the maximum annual amount, or the qualifying deposits are above the maximum annual amount or the bonus claim does not equal the correct percentage of qualifying funds"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request for an account that has already been closed</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1000000903
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567802",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNT_ALREADY_CLOSED",
          "message": "The LISA account is already closed"
        }
        </pre>
                    </td>
               </tr>
               <tr>
                   <td>
                     <p>Request for an account that has already been voided</p>
                     <p class="code--block">
                       <strong>lisaManagerReferenceNumber:</strong><br>
                       <a href="#section/Testing">Use your test user profile</a><br>
                       <br>
                       <strong>accountId:</strong><br>
                       2000000903
                     </p>
                   </td>
                   <td>
        <pre class="code--block">
        {
         "lifeEventId": "1234567802",
         "periodStartDate": "2017-04-06",
         "periodEndDate": "2017-05-05",
         "htbTransfer": {
           "htbTransferInForPeriod": 0.00,
           "htbTransferTotalYTD": 0.00
         },
         "inboundPayments": {
           "newSubsForPeriod": 4000.00,
           "newSubsYTD": 4000.00,
           "totalSubsForPeriod": 4000.00,
           "totalSubsYTD": 4000.00
         },
         "bonuses": {
           "bonusPaidYTD": 0.0,
           "bonusDueForPeriod": 1000.00,
           "totalBonusDueYTD": 1000.00,
           "claimReason": "Life Event"
         }
        }
        </pre>
                   </td>
                   <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
         "code": "INVESTOR_ACCOUNT_ALREADY_VOID",
         "message": "The LISA account is already void"
        }
        </pre>
                   </td>
              </tr>

               <tr>
                   <td>
                     <p>Request for an account that has already been cancelled</p>
                     <p class="code--block">
                       <strong>lisaManagerReferenceNumber:</strong><br>
                       <a href="#section/Testing">Use your test user profile</a><br>
                       <br>
                       <strong>accountId:</strong><br>
                       3000000903
                     </p>
                   </td>
                   <td>
        <pre class="code--block">
        {
         "lifeEventId": "1234567802",
         "periodStartDate": "2017-04-06",
         "periodEndDate": "2017-05-05",
         "htbTransfer": {
           "htbTransferInForPeriod": 0.00,
           "htbTransferTotalYTD": 0.00
         },
         "inboundPayments": {
           "newSubsForPeriod": 4000.00,
           "newSubsYTD": 4000.00,
           "totalSubsForPeriod": 4000.00,
           "totalSubsYTD": 4000.00
         },
         "bonuses": {
           "bonusPaidYTD": 0.0,
           "bonusDueForPeriod": 1000.00,
           "totalBonusDueYTD": 1000.00,
           "claimReason": "Life Event"
         }
        }
        </pre>
                   </td>
                   <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
         "code": "INVESTOR_ACCOUNT_ALREADY_CANCELLED",
         "message": "The LISA account is already cancelled"
        }
        </pre>
                   </td>
              </tr>
              <tr>
                    <td>
                      <p>Request for a bonus claim after 5 April 2018 containing help to buy funds.</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2018-04-06",
          "periodEndDate": "2018-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 1000.00,
            "htbTransferTotalYTD": 1000.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1050.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Regular Bonus"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class ="code--block">
        {
          "code": "HELP_TO_BUY_NOT_APPLICABLE",
          "message": "Help to buy is only applicable for claims within the 2017-18 tax year"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Superseded transaction containing details which don't match an existing transaction</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1000000403
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2018-04-06",
          "periodEndDate": "2018-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1050.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "automaticRecoveryAmount": 1000.00,
            "originalTransactionId": "1234567892",
            "originalBonusDueForPeriod": 2000.00,
            "transactionResult": -1000.00,
            "reason": "Bonus recovery"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class ="code--block">
        {
          "code": "SUPERSEDED_BONUS_CLAIM_AMOUNT_MISMATCH",
          "message": "originalTransactionId and the originalBonusDueForPeriod amount do not match the information in the original bonus request"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Superseded transaction with an outcome error</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        2000000403
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2018-04-06",
          "periodEndDate": "2018-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1050.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "automaticRecoveryAmount": 1000.00,
            "originalTransactionId": "1234567892",
            "originalBonusDueForPeriod": 2000.00,
            "transactionResult": -1000.00,
            "reason": "Bonus recovery"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class ="code--block">
        {
          "code": "SUPERSEDED_BONUS_REQUEST_OUTCOME_ERROR",
          "message": "The calculation from your superseded bonus claim is incorrect"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>This account is not eligible for a bonus payment because the investor already has another LISA account</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        3000000403
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2018-04-06",
          "periodEndDate": "2018-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1050.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "automaticRecoveryAmount": 1000.00,
            "originalTransactionId": "1234567892",
            "originalBonusDueForPeriod": 2000.00,
            "transactionResult": -1000.00,
            "reason": "Bonus recovery"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class ="code--block">
        {
          "code": "ACCOUNT_ERROR_NO_SUBSCRIPTIONS_THIS_TAX_YEAR",
          "message": "This account is not eligible for a bonus payment because the investor already has another LISA account"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request containing a life event ID that does not exist</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1000000404
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567803",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "LIFE_EVENT_NOT_FOUND",
          "message": "The lifeEventId does not match with HMRC’s records"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request containing an account ID that does not exist</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        0000000404
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567804",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request for a bonus claim that has already been requested</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        0000000409
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class ="code--block">
        {
          "code": "BONUS_CLAIM_ALREADY_EXISTS",
          "message": "The investor’s bonus payment has already been requested",
          "transactionId": "0123456789"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request to supersede a transaction that has already been superseded</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1000000409
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "periodStartDate": "2018-04-06",
          "periodEndDate": "2018-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1050.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "automaticRecoveryAmount": 1000.00,
            "originalTransactionId": "0000006789",
            "originalBonusDueForPeriod": 2000.00,
            "transactionResult": -1000.00,
            "reason": "Bonus recovery"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">409 (Conflict)</code></p>
        <pre class ="code--block">
        {
          "code": "BONUS_CLAIM_ALREADY_SUPERSEDED",
          "message": "This bonus claim has already been superseded",
          "transactionId": "0000456789"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                      <p>Request with an invalid 'Accept' header</p>
                      <p class="code--block">
                        <strong>lisaManagerReferenceNumber:</strong><br>
                        <a href="#section/Testing">Use your test user profile</a><br>
                        <br>
                        <strong>accountId:</strong><br>
                        1234567890<br>
                        <br>
                        <strong>Accept:</strong><br>
                        application/vnd.hmrc.1.0
                      </p>
                    </td>
                    <td>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0.00,
            "htbTransferTotalYTD": 0.00
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000.00,
            "newSubsYTD": 4000.00,
            "totalSubsForPeriod": 4000.00,
            "totalSubsYTD": 4000.00
          },
          "bonuses": {
            "bonusPaidYTD": 0.0,
            "bonusDueForPeriod": 1000.00,
            "totalBonusDueYTD": 1000.00,
            "claimReason": "Life Event"
          }
        }
        </pre>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
        	</tbody>
        </table>
      operationId: requestBonusPayment
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/lifetimeIsaManagerAccountsTransactionsRequest'
            examples:
              example-1:
                value:
                  lifeEventId: '1234567891'
                  periodStartDate: 2017-04-06
                  periodEndDate: 2017-05-05
                  htbTransfer:
                    htbTransferInForPeriod: 0
                    htbTransferTotalYTD: 0
                  inboundPayments:
                    newSubsForPeriod: 4000
                    newSubsYTD: 4000
                    totalSubsForPeriod: 4000
                    totalSubsYTD: 4000
                  bonuses:
                    bonusPaidYTD: 0
                    bonusDueForPeriod: 1000
                    totalBonusDueYTD: 1000
                    claimReason: Life Event
              example-2:
                value:
                  periodStartDate: 2017-04-06
                  periodEndDate: 2017-05-05
                  inboundPayments:
                    newSubsForPeriod: 4000
                    newSubsYTD: 4000
                    totalSubsForPeriod: 4000
                    totalSubsYTD: 4000
                  bonuses:
                    bonusPaidYTD: 0
                    bonusDueForPeriod: 1000
                    totalBonusDueYTD: 1000
                    claimReason: Superseded Bonus
                  supersede:
                    automaticRecoveryAmount: 1000
                    originalTransactionId: '0000456789'
                    originalBonusDueForPeriod: 1000
                    transactionResult: -1000
                    reason: Bonus recovery
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsTransactionsResponse'
              examples:
                example-1:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Bonus transaction created
                      transactionId: '0123456789'
                example-2:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Bonus transaction created - late notification
                      transactionId: '0023456789'
                example-3:
                  value:
                    status: 201
                    success: true
                    data:
                      message: Bonus transaction superseded
                      transactionId: '0000456789'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                badRequest:
                  $ref: '#/components/examples/invalidLmrn'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                forbidden:
                  value:
                    code: FORBIDDEN
                    message: There is a problem with the request data
                lifeEventNotProvided:
                  value:
                    code: LIFE_EVENT_NOT_PROVIDED
                    message: lifeEventId is required when the claimReason is a life event
                bonusWrong:
                  value:
                    code: BONUS_CLAIM_ERROR
                    message: The bonus amount given is above the maximum annual amount, or the qualifying deposits are above the maximum annual amount or the bonus claim does not equal the correct percentage of qualifying funds
                accountClosed:
                  $ref: '#/components/examples/accountClosed'
                accountCancelled:
                  $ref: '#/components/examples/accountCancelled'
                accountVoid:
                  $ref: '#/components/examples/accountVoid'
                helpToBuyNotApplicable:
                  value:
                    code: HELP_TO_BUY_NOT_APPLICABLE
                    message: Help to buy is only applicable for claims within the 2017-18 tax year
                bonusClaimTimescalesExceeded:
                  value:
                    code: BONUS_CLAIM_TIMESCALES_EXCEEDED
                    message: The timescale for claiming a bonus has passed. The claim period lasts for 6 years and 14 days
                supersededBonusClaimAmountMismatch:
                  value:
                    code: SUPERSEDED_BONUS_CLAIM_AMOUNT_MISMATCH
                    message: originalTransactionId and the originalBonusDueForPeriod amount do not match the information in the original bonus request
                supersededBonusRequestOutcomeError:
                  value:
                    code: SUPERSEDED_BONUS_REQUEST_OUTCOME_ERROR
                    message: The calculation from your superseded bonus claim is incorrect
                noSubscriptionsError:
                  value:
                    code: ACCOUNT_ERROR_NO_SUBSCRIPTIONS_THIS_TAX_YEAR
                    message: This account is not eligible for a bonus payment because the investor already has another LISA account
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noLifeEvent:
                  value:
                    code: LIFE_EVENT_NOT_FOUND
                    message: The lifeEventId does not match with HMRC’s records
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noLifeEvent:
                  value:
                    code: BONUS_CLAIM_ALREADY_EXISTS
                    message: The investor’s bonus payment has already been requested
                bonusClaimAlreadySuperseded:
                  value:
                    code: BONUS_CLAIM_ALREADY_SUPERSEDED
                    message: This bonus claim has already been superseded
      deprecated: false
      security:
        - user-restricted:
            - write:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/transactions/{transactionId}:
    get:
      tags:
        - Bonus Requests
      summary: Get details of a bonus request
      description: | 
        Use an investor’s transaction ID to get a request for a bonus payment that has been submitted to HMRC.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
        	<colgroup>
        		<col width="40%">
        		<col width="60%">
        	</colgroup>
        	<thead>
        		<tr>
        			<th>Scenario</th>
        			<th>Response</th>
        		</tr>
        	</thead>
        	<tbody>
        	    <tr>
        		    <td>
        		    	<p>Retrieve details for a bonus payment associated with a LISA account</p>
        		    	<p class ="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234567890<br>
        		    		<strong>transactionId:</strong> 0123456789
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "lifeEventId": "1234567891",
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0,
            "htbTransferTotalYTD": 0
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000,
            "newSubsYTD": 4000,
            "totalSubsForPeriod": 4000,
            "totalSubsYTD": 4000
          },
          "bonuses": {
            "bonusDueForPeriod": 1000,
            "totalBonusDueYTD": 1000,
            "bonusPaidYTD": 0,
            "claimReason": "Life Event"
          },
          "supersededBy": "0000456789"
        }
        </pre>
        			</td>
        		</tr>
            <tr>
        	    <td>
        		    	<p>Retrieve details for a bonus payment associated with a LISA account (regular bonus)</p>
        		    	<p class ="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234567890<br>
        		    		<strong>transactionId:</strong> 0003456789
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "htbTransfer": {
            "htbTransferInForPeriod": 0,
            "htbTransferTotalYTD": 0
          },
          "inboundPayments": {
            "newSubsForPeriod": 4000,
            "newSubsYTD": 4000,
            "totalSubsForPeriod": 4000,
            "totalSubsYTD": 4000
          },
          "bonuses": {
            "bonusDueForPeriod": 1000,
            "totalBonusDueYTD": 1000,
            "bonusPaidYTD": 0,
            "claimReason": "Regular Bonus"
          },
          "supersededBy": "0000056789"
        }
        </pre>
        			</td>
        		</tr>
        		<tr>
        	    <td>
        		    	<p>Retrieve a superseded transaction (bonus recovery)</p>
        		    	<p class="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234567890<br>
        		    		<strong>transactionId:</strong> 0000456789
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000,
            "newSubsYTD": 4000,
            "totalSubsForPeriod": 4000,
            "totalSubsYTD": 4000
          },
          "bonuses": {
            "bonusDueForPeriod": 1000,
            "totalBonusDueYTD": 1000,
            "bonusPaidYTD": 0,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "automaticRecoveryAmount": 1000,
            "originalTransactionId": "0123456789",
            "originalBonusDueForPeriod": 1000,
            "transactionResult": -1000,
            "reason": "Bonus recovery"
          }
        }
        </pre>
        			</td>
        		</tr>
        		<tr>
        	    <td>
        		    	<p>Retrieve a superseded transaction (additional bonus)</p>
        		    	<p class="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234567890<br>
        		    		<strong>transactionId:</strong> 0000056789
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "periodStartDate": "2017-04-06",
          "periodEndDate": "2017-05-05",
          "inboundPayments": {
            "newSubsForPeriod": 4000,
            "newSubsYTD": 4000,
            "totalSubsForPeriod": 4000,
            "totalSubsYTD": 4000
          },
          "bonuses": {
            "bonusDueForPeriod": 1000,
            "totalBonusDueYTD": 1000,
            "bonusPaidYTD": 0,
            "claimReason": "Superseded Bonus"
          },
          "supersede": {
            "originalTransactionId": "0003456789",
            "originalBonusDueForPeriod": 4000,
            "transactionResult": 4000,
            "reason": "Additional bonus"
          }
        }
        </pre>
        			</td>
        		</tr>
        		<tr>
        		  <td>
        				<p>Request with an invalid LISA Manager reference number</p>
        				<p class ="code--block">
        					<strong>lisaManagerReferenceNumber:</strong> 123456<br>
        					<strong>accountId:</strong> 1234567890<br>
        					<strong>transactionId:</strong> 0123456789
        				</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
        			</td>
        		</tr>
        	   <tr>
        		    <td>
        		    	<p>Request with an invalid accountId</p>
        		    	<p class ="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234%3D5678<br>
        		    		<strong>transactionId:</strong> 0123456789
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
        			</td>
        		</tr>
        	   <tr>
        		    <td>
        		    	<p>Request with an invalid bonus payment transaction</p>
        		    	<p class ="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234567890<br>
        		    		<strong>transactionId:</strong> 0000000404
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "BONUS_PAYMENT_TRANSACTION_NOT_FOUND",
          "message": "transactionId does not match HMRC’s records"
        }
        </pre>
        			</td>
        		</tr>
        	   <tr>
        		    <td>
        		    	<p>Request with an invalid LISA account</p>
        		    	<p class ="code--block">
        		    		<strong>lisaManagerReferenceNumber:</strong> <a href="#section/Testing">Use your test user profile</a><br>
        		    		<strong>accountId:</strong> 1234567899<br>
        		    		<strong>transactionId:</strong> 1000000404
        		    	</p>
        			</td>
        			<td>
        				<p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
        			</td>
        		</tr>
        	</tbody>
        </table>
      operationId: getDetailsOfBonusRequest
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/transactionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsTransactionsTransactionIdResponse'
              examples:
                withHtb:
                  value:
                    lifeEventId: '1234567891'
                    periodStartDate: 2017-04-06
                    periodEndDate: 2017-05-05
                    htbTransfer:
                      htbTransferInForPeriod: 0
                      htbTransferTotalYTD: 0
                    inboundPayments:
                      newSubsForPeriod: 4000
                      newSubsYTD: 4000
                      totalSubsForPeriod: 4000
                      totalSubsYTD: 4000
                    bonuses:
                      bonusDueForPeriod: 1000
                      totalBonusDueYTD: 1000
                      claimReason: Life Event
                withoutHtb:
                  value:
                    periodStartDate: 2017-04-06
                    periodEndDate: 2017-05-05
                    inboundPayments:
                      newSubsForPeriod: 4000
                      newSubsYTD: 4000
                      totalSubsForPeriod: 4000
                      totalSubsYTD: 4000
                    bonuses:
                      bonusPaidYTD: 0
                      bonusDueForPeriod: 1000
                      totalBonusDueYTD: 1000
                      claimReason: Regular Bonus
                supersede:
                  value:
                    periodStartDate: 2018-04-06
                    periodEndDate: 2018-05-05
                    inboundPayments:
                      newSubsForPeriod: 0
                      newSubsYTD: 0
                      totalSubsForPeriod: 0
                      totalSubsYTD: 0
                    bonuses:
                      bonusDueForPeriod: 0
                      totalBonusDueYTD: 0
                      claimReason: Superseded Bonus
                    supersede:
                      automaticRecoveryAmount: 300
                      originalTransactionId: '0000456789'
                      originalBonusDueForPeriod: -300
                      transactionResult: 300
                      reason: Bonus recovery
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noTransaction:
                  value:
                    code: BONUS_PAYMENT_TRANSACTION_NOT_FOUND
                    message: The transactionId does not match HMRC’s records
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/accounts/{accountId}/transactions/{transactionId}/payments:
    get:
      tags:
        - Payments and Debts
      summary: Get the payment details for a bonus claim or withdrawal charge
      description: | 
        Use an investor’s transaction ID to get payment details for a bonus claim or withdrawal charge, including when the amount is due to be paid or collected.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="40%">
            <col width="60%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>Request for a paid payment</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 0123456789</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "0123456789",
          "transactionType": "Payment",
          "paymentStatus": "Paid",
          "paymentDate": "2017-06-20",
          "paymentAmount": 1000,
          "paymentReference": "002630000993"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a pending transaction (payment or debt)</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 0000000200</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "0000000200",
          "paymentStatus": "Pending"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a pending payment with a due date</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 3000000200</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "3000000200",
          "transactionType": "Payment",
          "paymentStatus": "Pending",
          "paymentDueDate": "2017-06-20"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a cancelled transaction</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 1000000200</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "1000000200",
          "paymentStatus": "Cancelled",
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a void transaction</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 2000000200</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "2000000200",
          "paymentStatus": "Void"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a debt which is due to be collected</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 2345678902</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "2345678902",
          "transactionType": "Debt",
          "paymentStatus": "Due",
          "paymentDueDate": "2018-01-20",
          "paymentAmount": 200,
          "paymentReference": "0000002630000993"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a debt which has been collected</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 2345678903</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "2345678903",
          "transactionType": "Debt",
          "paymentStatus": "Collected",
          "paymentDate": "2018-02-20",
          "paymentAmount": 250,
          "paymentReference": "0000002630000994"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for a transaction which was superseded before being paid</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 2345678901</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "2345678901",
          "paymentStatus": "Superseded",
          "supersededBy": "2345678903"
        }
        </pre>
                    </td>
               </tr>
               <tr>
                    <td><p>Request to refund withdrawal charge has been cancelled</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 0000000403</p></td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
          "transactionId": "0000000403",
          "transactionType": "Payment",
          "paymentStatus": "Charge refund cancelled"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid account ID and Transaction ID, but an invalid LISA Manager reference number</p><p class="code--block">lisaManagerReferenceNumber: 123456<br>accountId: 1234567890<br>transactionId: 0123456789</p></td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with a valid LISA Manager reference number and Transaction ID, but an invalid account ID</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234%3D5678<br>transactionId: 0123456789</p></td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter accountId in the correct format, like ABC12345"
        }
        </pre>
                    </td>
               </tr>
                <tr>
                    <td><p>Request for a transaction that does not exist</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 0000000404</p></td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "TRANSACTION_NOT_FOUND",
          "message": "transactionId does not match HMRC’s records"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request for an account that does not exist</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567899<br>transactionId: 1000000404</p></td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "INVESTOR_ACCOUNTID_NOT_FOUND",
          "message": "Enter a real accountId"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td><p>Request with an invalid 'Accept' header</p><p class="code--block">lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>accountId: 1234567890<br>transactionId: 0123456789<br><br>Accept: application/vnd.hmrc.1.0</p></td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: getPaymentDetailsForBonusClaimOrWithdrawalCharge
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/contentTypeHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/accountId'
      - $ref: '#/components/parameters/transactionId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerAccountsTransactionsTransactionIdPaymentsResponse'
              examples:
                paid:
                  value:
                    transactionId: '0123456789'
                    transactionType: Payment
                    paymentStatus: Paid
                    paymentDate: 2017-05-20
                    paymentReference: '002630000993'
                    paymentAmount: 1000
                pending:
                  value:
                    transactionId: '0000000200'
                    paymentStatus: Pending
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidAccountId:
                  $ref: '#/components/examples/invalidAccountId'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noTransaction:
                  value:
                    code: TRANSACTION_NOT_FOUND
                    message: The transactionId does not match HMRC’s records
                accountIdNotFound:
                  $ref: '#/components/examples/accountIdNotFound'
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
  /lifetime-isa/manager/{lisaManagerReferenceNumber}/payments:
    get:
      tags:
        - Payments and Debts
      summary: Get a list of all payments and debts in a date range
      description: | 
        Get a list of all pending and paid payments from HMRC and due and collected debts owed to HMRC in a specific date range.
        
        ### Test data

        <table style="font-family:Roboto, sans-serif; font-size:14px;">
            <col width="40%">
            <col width="60%">
            <thead>
                <tr>
                    <th>Scenario</th>
                    <th>Response</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>
                        <p>Request for payments where some are found</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-05-20<br>
                            endDate: 2017-10-20
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">200 (OK)</code></p>
        <pre class="code--block">
        {
            "lisaManagerReferenceNumber": "Z123456",
            "payments": [
                {
                    "transactionType": "Payment",
                    "status": "Paid",
                    "paymentAmount": 10000,
                    "paymentDate": "2017-06-01",
                    "paymentReference": "3350000253"
                },
                {
                    "transactionType": "Payment",
                    "status": "Pending",
                    "paymentAmount": 12000,
                    "dueDate": "2017-07-04"
                },
                {
                    "transactionType": "Debt",
                    "status": "Collected",
                    "paymentAmount": 1000,
                    "paymentDate": "2017-08-04",
                    "paymentReference": "3350000253"
                },
                {
                    "transactionType": "Debt",
                    "status": "Due",
                    "paymentAmount": 1100,
                    "dueDate": "2017-09-04"
                }
            ]
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request for payments where none are found</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-04-06<br>
                            endDate: 2017-04-06
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "TRANSACTION_NOT_FOUND",
          "message": "No payments or debts exist for this date range"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with an invalid LISA Manager reference number</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: 123456<br>
                            startDate: 2017-04-06<br>
                            endDate: 2017-04-06
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "Enter lisaManagerReferenceNumber in the correct format, like Z1234"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with startDate in the wrong format</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 20-05-2017<br>
                            endDate: 2017-05-20
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "startDate is in the wrong format"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with endDate in the wrong format</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-05-20<br>
                            endDate: 20-05-2017
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "endDate is in the wrong format"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with startDate and endDate in the wrong format</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 20-05-2017<br>
                            endDate: 20-05-2017
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">400 (Bad Request)</code></p>
        <pre class="code--block">
        {
          "code": "BAD_REQUEST",
          "message": "startDate and endDate are in the wrong format"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with and endDate in the future</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: (today's date)<br>
                            endDate: (any date in the future)
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "endDate cannot be in the future"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with an endDate before the startDate</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-12-20<br>
                            endDate: 2017-12-19
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "endDate cannot be before startDate"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>startDate cannot be before 6 April 2017</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-04-05<br>
                            endDate: 2017-04-06
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "startDate cannot be before 6 April 2017"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with an endDate over a year after startDate</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-04-06<br>
                            endDate: 2018-04-07
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">403 (Forbidden)</code></p>
        <pre class="code--block">
        {
          "code": "FORBIDDEN",
          "message": "endDate cannot be more than a year after startDate"
        }
        </pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Request with an invalid 'Accept' header</p>
                        <p class="code--block">
                            lisaManagerReferenceNumber: <a href="#section/Testing">Use your test user profile</a><br>
                            startDate: 2017-04-06<br>
                            endDate: 2017-05-05
                            <br>
                            Accept: application/vnd.hmrc.1.0
                        </p>
                    </td>
                    <td><p>HTTP status: <code class="code--slim">404 (Not Found)</code></p>
        <pre class="code--block">
        {
          "code": "MATCHING_RESOURCE_NOT_FOUND",
          "message": "A resource with the name in the request can not be found in the API"
        }
        </pre>
                    </td>
                </tr>
            </tbody>
        </table>
      operationId: getListOfAllPaymentsAndDebtsInDateRange
      parameters:
      - $ref: '#/components/parameters/acceptHeader'
      - $ref: '#/components/parameters/authorizationHeader'
      - $ref: '#/components/parameters/lisaManagerReferenceNumber'
      - $ref: '#/components/parameters/startDate'
      - $ref: '#/components/parameters/endDate'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaManagerPaymentsResponse'
              example:
                lisaManagerReferenceNumber: Z123456
                payments:
                - transactionType: Payment
                  status: Paid
                  paymentAmount: 10000
                  paymentDate: 2017-06-01
                  paymentReference: '1040000872'
                - transactionType: Payment
                  status: Pending
                  paymentAmount: 12000
                  dueDate: 2017-07-04
                - transactionType: Debt
                  status: Collected
                  paymentAmount: 1000
                  paymentDate: 2017-08-04
                  paymentReference: '1040000985'
                - transactionType: Debt
                  status: Due
                  paymentAmount: 1100
                  dueDate: 2017-09-04
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/badRequest'
                invalidLmrn:
                  $ref: '#/components/examples/invalidLmrn'
                invalidStartDate:
                  value:
                    code: BAD_REQUEST
                    message: startDate is in the wrong format
                invalidEndDate:
                  value:
                    code: BAD_REQUEST
                    message: endDate is in the wrong format
                invalidStartAndEndDates:
                  value:
                    code: BAD_REQUEST
                    message: startDate and endDate are in the wrong format
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                notOpenStatus:
                  $ref: '#/components/examples/notOpenStatusUnauthorized'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                endDateInFutureStatus:
                  value:
                    code: FORBIDDEN
                    message: endDate cannot be in the future
                endDateBeforeStartStatus:
                  value:
                    code: FORBIDDEN
                    message: endDate cannot be before startDate
                startDateBeforeAprilStatus:
                  value:
                    code: FORBIDDEN
                    message: startDate cannot be before 6 April 2017
                endDateOverYearAfterStatus:
                  value:
                    code: FORBIDDEN
                    message: endDate cannot be more than a year after startDate
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/lifetimeIsaErrorResponse'
              examples:
                noTransactionsFound:
                  value:
                    code: TRANSACTION_NOT_FOUND
                    message: No payments or debts exist for this date range
      deprecated: false
      security:
        - user-restricted:
            - read:lisa
components:
  parameters:
    acceptHeader:
      name: Accept
      in: header
      description: Specifies the response format and the [version](/api-documentation/docs/reference-guide#versioning) of the API to be used.
      style: simple
      schema:
        type: string
        enum:
          - application/vnd.hmrc.2.0+json
      required: true
    contentTypeHeader:
      name: Content-Type
      in: header
      description: Specifies the format of the request body, which must be JSON.
      style: simple
      schema:
        type: string
        enum:
          - application/json
      required: true
    authorizationHeader:
      name: Authorization
      in: header
      description: An [OAuth 2.0 Bearer Token](/api-documentation/docs/authorisation/user-restricted-endpoints) with appropriate scope.
      style: simple
      schema:
        type: string
        example: Bearer bb7fed3fe10dd235a2ccda3d50fb
      required: true
    lisaManagerReferenceNumber:
      name: lisaManagerReferenceNumber
      in: path
      description: The reference given to the LISA provider when they applied for approval from HMRC.
      required: true
      style: simple
      schema:
        pattern: ^Z([0-9]{4}|[0-9]{6})$
        type: string
        example: Z1234
    accountId:
      name: accountId
      in: path
      description: The ID for the account. This will be generated by the LISA Manager and will only be unique when used in combination with lisaManagerReferenceNumber. Any special characters should be URL encoded.
      required: true
      style: simple
      schema:
        pattern: ^[a-zA-Z0-9 :/-]{1,20}$
        type: string
        example: ABC12345
    transactionId:
      name: transactionId
      in: path
      description: The ID for the transaction.
      required: true
      style: simple
      schema:
        pattern: ^\d{1,10}$
        type: string
        example: '1234567890'
    startDate:
      name: startDate
      in: query
      description: The first date in the claim period you want to search. This must be the 6th day of the month. This cannot be before 6 April 2017.
      required: true
      style: form
      explode: true
      schema:
        pattern: ^\d{4}-\d{2}-\d{2}$
        type: string
        example: 2017-05-06
    endDate:
      name: endDate
      in: query
      description: The last date of the claim period you want to search. This must be the 5th day of the month. This cannot be in the future, before the startDate, or more than a year after the startDate. It must be at least one month after the startDate.
      required: true
      style: form
      explode: true
      schema:
        pattern: ^\d{4}-\d{2}-\d{2}$
        type: string
        example: 2017-06-05
    lifeEventId:
      name: lifeEventId
      in: path
      description: The ID for the life event.
      required: true
      style: simple
      schema:
        pattern: ^\d{10}$
        type: string
        example: '1234567890'
  securitySchemes:
    user-restricted:
      type: oauth2
      description: HMRC supports OAuth 2.0 for authenticating [user-restricted](https://developer.service.hmrc.gov.uk/api-documentation/docs/authorisation/user-restricted-endpoints) API requests using an OAuth 2.0 Bearer Token in the Authorization header.
      flows:
        authorizationCode:
          authorizationUrl: https://api.service.hmrc.gov.uk/oauth/authorize
          tokenUrl: https://api.service.hmrc.gov.uk/oauth/token
          refreshUrl: https://api.service.hmrc.gov.uk/oauth/refresh
          scopes:
            read:lisa: Access Lifetime ISA information
            write:lisa: Create and update Lifetime ISA information
  schemas:
    lifetimeIsaManagerResponse:
      title: Lifetime ISA Manager Response
      required:
      - lisaManagerReferenceNumber
      type: object
      properties:
        lisaManagerReferenceNumber:
          pattern: ^Z([0-9]{4}|[0-9]{6})$
          type: string
          example: Z1234
        _links:
          type: object
    error-codeType:
      title: Error Code Types
      enum:
      - ACCEPT_HEADER_INVALID
      - ACCOUNT_ERROR_NO_SUBSCRIPTIONS_THIS_TAX_YEAR
      - ACCOUNT_WITHIN_CANCELLATION_PERIOD
      - BAD_REQUEST
      - BONUS_CLAIM_ALREADY_EXISTS
      - BONUS_CLAIM_ALREADY_SUPERSEDED
      - BONUS_CLAIM_ERROR
      - BONUS_CLAIM_TIMESCALES_EXCEEDED
      - BONUS_PAYMENT_TRANSACTION_NOT_FOUND
      - CANCELLATION_PERIOD_EXCEEDED
      - COMPLIANCE_ERROR_ACCOUNT_NOT_OPEN_LONG_ENOUGH
      - COMPLIANCE_ERROR_OTHER_PURCHASE_ON_RECORD
      - EXTENSION_ALREADY_EXISTS
      - FIRST_EXTENSION_ALREADY_APPROVED
      - FIRST_EXTENSION_NOT_APPROVED
      - FORBIDDEN
      - FUND_RELEASE_NOT_FOUND
      - FUND_RELEASE_SUPERSEDED
      - HELP_TO_BUY_NOT_APPLICABLE
      - INTERNAL_SERVER_ERROR
      - INVALID_DATA_PROVIDED
      - INVALID_PAYLOAD
      - INVESTOR_ACCOUNT_ALREADY_CANCELLED
      - INVESTOR_ACCOUNT_ALREADY_CLOSED
      - INVESTOR_ACCOUNT_ALREADY_EXISTS
      - INVESTOR_ACCOUNT_ALREADY_OPEN
      - INVESTOR_ACCOUNT_ALREADY_VOID
      - INVESTOR_ACCOUNT_CANNOT_BE_REINSTATED
      - INVESTOR_ACCOUNTID_NOT_FOUND
      - INVESTOR_ALREADY_EXISTS
      - INVESTOR_COMPLIANCE_CHECK_FAILED
      - INVESTOR_ELIGIBILITY_CHECK_FAILED
      - INVESTOR_NOT_FOUND
      - LIFE_EVENT_ALREADY_EXISTS
      - LIFE_EVENT_INAPPROPRIATE
      - LIFE_EVENT_NOT_FOUND
      - LIFE_EVENT_NOT_PROVIDED
      - NOT_FOUND
      - PREVIOUS_INVESTOR_ACCOUNT_DOES_NOT_EXIST
      - TRANSACTION_NOT_FOUND
      - TRANSFER_ACCOUNT_DATA_NOT_PROVIDED
      - TRANSFER_ACCOUNT_DATA_PROVIDED
      - SECOND_EXTENSION_ALREADY_APPROVED
      - SUPERSEDED_BONUS_CLAIM_AMOUNT_MISMATCH
      - SUPERSEDED_BONUS_REQUEST_OUTCOME_ERROR
      - SUPERSEDED_LIFE_EVENT_ALREADY_SUPERSEDED
      - SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR
      - SUPERSEDED_WITHDRAWAL_CHARGE_ID_AMOUNT_MISMATCH
      - SUPERSEDED_WITHDRAWAL_CHARGE_OUTCOME_ERROR
      - WITHDRAWAL_CHARGE_ALREADY_EXISTS
      - WITHDRAWAL_CHARGE_ALREADY_SUPERSEDED
      - WITHDRAWAL_CHARGE_TIMESCALES_EXCEEDED
      - WITHDRAWAL_CHARGE_TRANSACTION_NOT_FOUND
      - WITHDRAWAL_REPORTING_ERROR
      - UNAUTHORIZED
      - INVALID_POSTAL_CODE
      - INVALID_NAME_OR_NUMBER
      type: string
    lifetimeIsaErrorResponse:
      title: Lifetime ISA Error Response
      required:
      - code
      - message
      type: object
      properties:
        code:
          $ref: '#/components/schemas/error-codeType'
        message:
          type: string
        accountId:
          type: string
        lifeEventId:
          type: string
        transactionId:
          type: string
    lifetimeIsaManagerInvestorsRequest:
      title: Lifetime ISA Manager Investors request
      required:
      - investorNINO
      - firstName
      - lastName
      - dateOfBirth
      type: object
      properties:
        investorNINO:
          pattern: ^((?!(BG|GB|KN|NK|NT|TN|ZZ)|(D|F|I|Q|U|V)[A-Z]|[A-Z](D|F|I|O|Q|U|V))[A-Z]{2})[0-9]{6}[A-D]?$
          type: string
          example: BC123456D
        firstName:
          pattern: ^[a-zA-Z &`\-\'^]{1,35}$
          type: string
          description: The investor’s first name.
          example: FirstName
        lastName:
          pattern: ^[a-zA-Z &`\-\'^]{1,35}$
          type: string
          description: The investor’s last name.
          example: LastName
        dateOfBirth:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 1989-04-22
    lifetimeIsaManagerInvestorsResponse:
      title: Lifetime ISA Manager Investors Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data'
          - description: Response details.
    data:
      required:
      - message
      - investorId
      type: object
      properties:
        message:
          enum:
          - Investor created
          type: string
          description: A human-readable explanation for the result of the API call.
        investorId:
          pattern: ^\d{10}$
          type: string
          description: The investor’s ID reference number.  You must store this ID as it is needed for other API calls.
      description: Response details.
    lifetimeIsaManagerAccountsRequest:
      title: Lifetime ISA Manager Accounts Request
      required:
      - investorId
      - accountId
      - creationReason
      - firstSubscriptionDate
      type: object
      properties:
        investorId:
          pattern: ^\d{10}$
          type: string
          example: '1234567890'
        accountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          example: AB9876543210
        creationReason:
          allOf:
          - $ref: '#/components/schemas/creationReason'
          - description: The reason the account was created.
        firstSubscriptionDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-04-20
        transferAccount:
          allOf:
          - $ref: '#/components/schemas/transferAccount'
          - description: If the creationReason is ‘Transferred’, 'Current year funds transferred', or 'Previous year funds transferred', then this is required.
    creationReason:
      enum:
      - New
      - Transferred
      - Current year funds transferred
      - Previous year funds transferred
      type: string
      description: The reason the account was created.
    transferAccount:
      required:
      - transferredFromAccountId
      - transferredFromLMRN
      - transferInDate
      type: object
      properties:
        transferredFromAccountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          example: AB9876543210
        transferredFromLMRN:
          pattern: ^Z([0-9]{4}|[0-9]{6})$
          type: string
          example: Z1234
        transferInDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-04-20
      description: If the creationReason is ‘Transferred’, 'Current year funds transferred', or 'Previous year funds transferred', then this is required.
    lifetimeIsaManagerAccountsResponse:
      title: Lifetime ISA Manager Accounts Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data1'
          - description: Response details.
    data1:
      required:
      - message
      - accountId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message'
          - description: A human-readable explanation for the result of the API call.
        accountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          description: The provider’s own unique reference number for the investor’s LISA account.
      description: Response details.
    message:
      enum:
      - Account created
      - Account transferred
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsReinstateAccountRequest:
      title: Lifetime ISA Manager Accounts Reinstate Account Request
      required:
      - accountId
      type: object
      properties:
        accountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          example: AB9876543210
    lifetimeIsaManagerAccountsReinstateAccountResponse:
      title: Lifetime ISA Manager Accounts Reinstate Account Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 200.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data2'
          - description: Response details.
    data2:
      required:
      - message
      - accountId
      type: object
      properties:
        message:
          enum:
          - This account has been reinstated
          type: string
          description: A human-readable explanation for the result of the API call.
        accountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          description: The provider’s own unique reference number for the investor’s LISA account.
      description: Response details.
    lifetimeIsaManagerGetAccountsResponse:
      title: Lifetime ISA Manager Get Accounts Response
      required:
      - investorId
      - accountId
      - creationReason
      - firstSubscriptionDate
      - accountStatus
      - subscriptionStatus
      type: object
      properties:
        investorId:
          pattern: ^\d{10}$
          type: string
          example: '1234567890'
        accountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          example: AB9876543210
        creationReason:
          allOf:
          - $ref: '#/components/schemas/creationReason1'
          - description: The reason the account was created.
        firstSubscriptionDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-04-20
        accountStatus:
          allOf:
          - $ref: '#/components/schemas/accountStatus'
          - description: The status of the account.
        subscriptionStatus:
          allOf:
          - $ref: '#/components/schemas/subscriptionStatus'
          - description: The subscription status for the current tax year.
        accountClosureReason:
          allOf:
          - $ref: '#/components/schemas/accountClosureReason'
          - description: The reason the account was closed.
        closureDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-04-20
        transferAccount:
          allOf:
          - $ref: '#/components/schemas/transferAccount1'
          - description: Account transfer information.
    creationReason1:
      enum:
      - New
      - Transferred
      - Current year funds transferred
      - Previous year funds transferred
      - Reinstated
      type: string
      description: The reason the account was created.
    accountStatus:
      enum:
      - OPEN
      - VOID
      - CLOSED
      type: string
      description: The status of the account.
    subscriptionStatus:
      enum:
      - AVAILABLE
      - ACTIVE
      - LOCKED
      - CANCELLED
      - VOID
      type: string
      description: The subscription status for the current tax year.
    accountClosureReason:
      enum:
      - All funds withdrawn
      - Cancellation
      - Transferred out
      - Voided
      type: string
      description: The reason the account was closed.
    transferAccount1:
      required:
      - transferredFromAccountId
      - transferredFromLMRN
      - transferInDate
      type: object
      properties:
        transferredFromAccountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          example: AB9876543210
        transferredFromLMRN:
          pattern: ^Z([0-9]{4}|[0-9]{6})$
          type: string
          example: Z1234
        transferInDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-04-20
      description: Account transfer information.
    lifetimeIsaManagerAccountsCloseAccountRequest:
      title: Lifetime ISA Manager Accounts Close Account Request
      required:
      - accountClosureReason
      - closureDate
      type: object
      properties:
        accountClosureReason:
          allOf:
          - $ref: '#/components/schemas/accountClosureReason1'
          - description: The reason the account was closed.
        closureDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
    accountClosureReason1:
      enum:
      - All funds withdrawn
      - Cancellation
      type: string
      description: The reason the account was closed.
    lifetimeIsaManagerAccountsCloseAccountResponse:
      title: Lifetime ISA Manager Accounts Close Account Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 200.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data2'
          - description: Response details.
    lifetimeIsaManagerAccountsUpdateSubscriptionRequest:
      title: Lifetime ISA Manager Accounts Update Subscription Request
      required:
      - firstSubscriptionDate
      type: object
      properties:
        firstSubscriptionDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
    lifetimeIsaManagerAccountsUpdateSubscriptionResponse:
      title: Lifetime ISA Manager Accounts Update Subscription Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 200.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data4'
          - description: Response details.
    data4:
      required:
      - code
      - message
      - accountId
      type: object
      properties:
        code:
          allOf:
          - $ref: '#/components/schemas/code'
          - description: A machine-readable code for the result of the API call. This is unique for each scenario.
        message:
          allOf:
          - $ref: '#/components/schemas/message1'
          - description: A human-readable explanation for the result of the API call.
        accountId:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          description: The provider’s own unique reference number for the investor’s LISA account.
      description: Response details.
    code:
      enum:
      - UPDATED
      - UPDATED_AND_ACCOUNT_VOID
      type: string
      description: A machine-readable code for the result of the API call. This is unique for each scenario.
    message1:
      enum:
      - Successfully updated the firstSubscriptionDate for the LISA account
      - Successfully updated the firstSubscriptionDate for the LISA account and changed the account status to void because the investor has another account with an earlier firstSubscriptionDate
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsEventsRequest:
      title: Lifetime ISA Manager Accounts Events Request
      required:
      - eventType
      - eventDate
      type: object
      properties:
        eventType:
          $ref: '#/components/schemas/eventType'
        eventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
    eventType:
      enum:
      - LISA Investor Death
      - LISA Investor Terminal Ill Health
      type: string
    lifetimeIsaManagerAccountsEventsResponse:
      title: Lifetime ISA Manager Accounts Events Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data5'
          - description: Response details.
    data5:
      required:
      - message
      - lifeEventId
      type: object
      properties:
        message:
          enum:
          - Life event created
          type: string
          description: A human-readable explanation for the result of the API call.
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          description: The life event’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    lifetimeIsaManagerAccountsEventsAnnualReturnsRequest:
      title: Lifetime ISA Manager Accounts Events Annual Returns Request
      required:
      - eventDate
      - lisaManagerName
      - taxYear
      - marketValueCash
      - marketValueStocksAndShares
      - annualSubsCash
      - annualSubsStocksAndShares
      type: object
      properties:
        eventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2018-03-31
        lisaManagerName:
          maxLength: 50
          pattern: ^[a-zA-Z0-9 '/,&().-]{1,50}$
          type: string
          description: The name of the LISA provider.
          example: Company Name
        taxYear:
          type: integer
          description: The tax year for the return of information. You cannot give the current tax year. You can only send a return of information for a previous tax year. Give the year that the tax year ends in. For example, for the 2017 to 2018 tax year give 2018.
          format: int32
          example: 2018
        marketValueCash:
          maximum: 999999
          minimum: 0
          type: integer
          format: int32
          example: 1000
        marketValueStocksAndShares:
          maximum: 999999
          minimum: 0
          type: integer
          format: int32
          example: 1000
        annualSubsCash:
          maximum: 9999
          minimum: 0
          type: integer
          format: int32
          example: 100
        annualSubsStocksAndShares:
          maximum: 9999
          minimum: 0
          type: integer
          format: int32
          example: 100
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede'
          - description: Correct an existing return of information.
    supersede:
      required:
      - originalLifeEventId
      - originalEventDate
      type: object
      properties:
        originalLifeEventId:
          pattern: ^\d{10}$
          type: string
          description: The lifeEventId of the original return of information affected by the correction. This is used together with the originalEventDate to make sure the right return of information is replaced.
        originalEventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2018-03-31
      description: Correct an existing return of information.
    lifetimeIsaManagerAccountsEventsAnnualReturnsResponse:
      title: Lifetime ISA Manager Accounts Events Annual Returns Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data6'
          - description: Response details.
    data6:
      required:
      - message
      - lifeEventId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message2'
          - description: A human-readable explanation for the result of the API call.
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          description: The life event’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    message2:
      enum:
      - Life event created
      - Life event superseded
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsEventsFundReleasesRequest:
      title: Lifetime ISA Manager Accounts Events Fund Releases Request
      required:
      - eventDate
      - withdrawalAmount
      type: object
      properties:
        eventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-06
        withdrawalAmount:
          type: number
          description: This is the amount that the investor has withdrawn from the LISA account. You can include a value up to 2 decimal places.
        conveyancerReference:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          description: This is the reference for the conveyancer involved with the property purchase.
          example: CR12345-6789
        propertyDetails:
          allOf:
          - $ref: '#/components/schemas/propertyDetails'
          - description: The details of the property that you are requesting funds to buy.
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede1'
          - description: Correct an existing fund release with a new eventDate and withdrawalAmount.
    propertyDetails:
      required:
      - nameOrNumber
      - postalCode
      type: object
      properties:
        nameOrNumber:
          pattern: ^[A-Za-z0-9 :/-]{1,35}$
          type: string
          description: The name or number of the property that you are requesting funds to buy.
          example: Flat A
        postalCode:
          pattern: ^[A-Za-z0-9 ]{1,8}$
          type: string
          description: The postcode of the property that you are requesting funds to buy.
          example: AA1 1AA
      description: The details of the property that you are requesting funds to buy.
    supersede1:
      required:
      - originalLifeEventId
      - originalEventDate
      type: object
      properties:
        originalLifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        originalEventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-06
      description: Correct an existing fund release with a new eventDate and withdrawalAmount.
    lifetimeIsaManagerAccountsEventsFundReleasesResponse:
      title: Lifetime ISA Manager Accounts Events Fund Releases Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data7'
          - description: Response details.
    data7:
      required:
      - message
      - lifeEventId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message3'
          - description: A human-readable explanation for the result of the API call.
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          description: The fund release’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    message3:
      enum:
      - Fund release created
      - Fund release superseded
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsEventsPurchaseExtensionsRequest:
      title: Lifetime ISA Manager Accounts Events Purchase Extensions Request
      required:
      - eventDate
      - eventType
      type: object
      properties:
        fundReleaseId:
          pattern: ^\d{10}$
          type: string
          example: '3456789000'
        eventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-10
        eventType:
          allOf:
          - $ref: '#/components/schemas/eventType1'
          - description: The type of extension.
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede2'
          - description: Correct an existing extension.
    eventType1:
      enum:
      - Extension one
      - Extension two
      type: string
      description: The type of extension.
    supersede2:
      required:
      - originalLifeEventId
      - originalEventDate
      type: object
      properties:
        originalLifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '6789000001'
        originalEventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-11
      description: Correct an existing extension.
    lifetimeIsaManagerAccountsEventsPurchaseExtensionsResponse:
      title: Lifetime ISA Manager Accounts Events Purchase Extensions Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data8'
          - description: Response details.
    data8:
      required:
      - message
      - lifeEventId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message4'
          - description: A human-readable explanation for the result of the API call.
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          description: The extension’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    message4:
      enum:
      - Extension created
      - Extension superseded
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsEventsPurchaseOutcomesRequest:
      title: Lifetime ISA Manager Accounts Events Purchase Outcomes Request
      required:
      - eventDate
      - propertyPurchaseResult
      type: object
      properties:
        fundReleaseId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        eventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-06
        propertyPurchaseResult:
          allOf:
          - $ref: '#/components/schemas/propertyPurchaseResult'
          - description: Whether a property purchase was completed or failed.
        propertyPurchaseValue:
          type: number
          description: The value of the property that the investor purchased. Only include this information if the purchase was completed. You can include an amount up to 2 decimal places.
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede3'
          - description: Correct an existing purchase outcome.
    propertyPurchaseResult:
      enum:
      - Purchase failed
      - Purchase completed
      type: string
      description: Whether a property purchase was completed or failed.
    supersede3:
      required:
      - originalLifeEventId
      - originalEventDate
      type: object
      properties:
        originalLifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        originalEventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-06
      description: Correct an existing purchase outcome.
    lifetimeIsaManagerAccountsEventsPurchaseOutcomesResponse:
      title: Lifetime ISA Manager Accounts Events Purchase Outcomes Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data9'
          - description: Response details.
    data9:
      required:
      - message
      - lifeEventId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message5'
          - description: A human-readable explanation for the result of the API call.
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          description: The purchase outcome’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    message5:
      enum:
      - Purchase outcome created
      - Purchase outcome superseded
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsEventsLifeEventIdResponse:
      title: Lifetime ISA Manager Accounts Events Life Event Id Response
      required:
      - lifeEventId
      - eventType
      - eventDate
      type: object
      properties:
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        eventType:
          $ref: '#/components/schemas/eventType2'
        eventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
        lisaManagerName:
          maxLength: 50
          pattern: ^[a-zA-Z0-9 '/,&().-]{1,50}$
          type: string
          description: The name of the LISA provider.
          example: Company Name
        taxYear:
          type: integer
          description: The tax year for the return of information. This will be the year that the tax year ends in. For example, for the 2017 to 2018 tax year it will be 2018.
          format: int32
          example: 2018
        marketValueCash:
          maximum: 999999
          minimum: 0
          type: integer
          format: int32
          example: 1000
        marketValueStocksAndShares:
          maximum: 999999
          minimum: 0
          type: integer
          format: int32
          example: 1000
        annualSubsCash:
          maximum: 9999
          minimum: 0
          type: integer
          format: int32
          example: 100
        annualSubsStocksAndShares:
          maximum: 9999
          minimum: 0
          type: integer
          format: int32
          example: 100
        withdrawalAmount:
          type: number
          description: This is the amount that the investor has withdrawn from the LISA account.
        conveyancerReference:
          pattern: ^[a-zA-Z0-9 :/-]{1,20}$
          type: string
          description: This is the reference for the conveyancer involved with the property purchase.
          example: CR12345-6789
        propertyDetails:
          allOf:
          - $ref: '#/components/schemas/propertyDetails1'
          - description: The details of the property that you requested funds to buy.
        fundReleaseId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        propertyPurchaseValue:
          type: number
          description: The value of the property that the investor purchased. Only included if the purchase was completed.
        propertyPurchaseResult:
          allOf:
          - $ref: '#/components/schemas/propertyPurchaseResult'
          - description: Whether a property purchase was completed or failed.
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede4'
          - description: Shows that a life event was corrected.
        supersededBy:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
    eventType2:
      enum:
      - LISA Investor Death
      - LISA Investor Terminal Ill Health
      - Statutory Submission
      - Funds release
      - Extension one
      - Extension two
      - Purchase outcome
      type: string
    propertyDetails1:
      required:
      - nameOrNumber
      - postalCode
      type: object
      properties:
        nameOrNumber:
          pattern: ^[A-Za-z0-9 :/-]{1,35}$
          type: string
          description: The name or number of the property that you requested funds to buy.
          example: Flat A
        postalCode:
          pattern: ^[A-Za-z0-9 ]{1,8}$
          type: string
          description: The postcode of the property that you requested funds to buy.
          example: AA1 1AA
      description: The details of the property that you requested funds to buy.
    supersede4:
      required:
      - originalLifeEventId
      - originalEventDate
      type: object
      properties:
        originalLifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        originalEventDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
      description: Shows that a life event was corrected.
    lifetimeIsaManagerAccountsWithdrawalChargesRequest:
      title: Lifetime ISA Manager Accounts Withdrawal Charges Request
      required:
      - claimPeriodStartDate
      - claimPeriodEndDate
      - withdrawalAmount
      - withdrawalChargeAmount
      - withdrawalChargeAmountYTD
      - fundsDeductedDuringWithdrawal
      - withdrawalReason
      type: object
      properties:
        claimPeriodStartDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          description: This is the start date of the claim period for the withdrawal charge. It must be the sixth day of the month. You cannot enter a date in the future.
          example: 2018-01-06
        claimPeriodEndDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          description: This is the end date of the claim period for the withdrawal charge. It must be the fifth day of the month. It has to be the month after the claimPeriodStartDate.
          example: 2018-02-05
        withdrawalAmount:
          type: number
          description: This is the amount that the investor has withdrawn from the LISA account.  You can include a value up to 2 decimal places.
        withdrawalChargeAmount:
          type: number
          description: This is the amount charged for the withdrawal. You can include a value up to 2 decimal places. If there is a charge made during withdrawal, withdrawalChargeAmount and automaticRecoveryAmount must be the same.
        withdrawalChargeAmountYTD:
          type: number
          description: This is the total value of withdrawal charges reported to HMRC for the current tax year to date. You can include a value up to 2 decimal places.
        fundsDeductedDuringWithdrawal:
          type: boolean
          description: This confirms if the investor was charged and funds were deducted at the time of the withdrawal.
        withdrawalReason:
          allOf:
          - $ref: '#/components/schemas/withdrawalReason'
          - description: This is used by HMRC to decide how the withdrawal charge is processed.
        automaticRecoveryAmount:
          type: number
          description: This is the amount HMRC can collect from the LISA manager when a withdrawal charge is due from the investor. This cannot be greater than the withdrawalChargeAmount. If there are no funds available, this value must be 0. If there is a charge made during withdrawal, automaticRecoveryAmount and withdrawalChargeAmount must be the same.
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede5'
          - description: Correct an existing withdrawal charge. You can request an additional charge, reduce a charge, or refund a charge.
    withdrawalReason:
      enum:
      - Regular withdrawal
      - Superseded withdrawal
      type: string
      description: This is used by HMRC to decide how the withdrawal charge is processed.
    supersede5:
      required:
      - originalTransactionId
      - originalWithdrawalChargeAmount
      - transactionResult
      - reason
      type: object
      properties:
        originalTransactionId:
          pattern: ^\d{1,10}$
          type: string
          example: '1234567890'
        originalWithdrawalChargeAmount:
          type: number
          description: This is how much was in the withdrawalChargeAmount in the original request. You can include a value up to 2 decimal places.
        transactionResult:
          type: number
          description: The amount to be added to or recovered from the original withdrawal charge.
        reason:
          allOf:
          - $ref: '#/components/schemas/reason'
          - description: Confirm whether an additional charge is due or whether the investor is owed some money.
      description: Correct an existing withdrawal charge. You can request an additional charge, reduce a charge, or refund a charge.
    reason:
      enum:
      - Additional withdrawal
      - Withdrawal reduction
      - Withdrawal refund
      type: string
      description: Confirm whether an additional charge is due or whether the investor is owed some money.
    lifetimeIsaManagerAccountsWithdrawalChargesResponse:
      title: Lifetime ISA Manager Accounts Withdrawal Charges Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data10'
          - description: Response details.
    data10:
      required:
      - message
      - transactionId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message6'
          - description: A human-readable explanation for the result of the API call.
        transactionId:
          pattern: ^\d{10}$
          type: string
          description: The transaction’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    message6:
      enum:
      - Unauthorised withdrawal transaction created
      - Unauthorised withdrawal transaction created - late notification
      - Unauthorised withdrawal transaction superseded
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsWithdrawalChargesTransactionIdResponse:
      title: Lifetime ISA Manager Accounts Withdrawal Charges Transaction Id Response
      required:
      - claimPeriodStartDate
      - claimPeriodEndDate
      - withdrawalAmount
      - withdrawalChargeAmount
      - withdrawalChargeAmountYTD
      - fundsDeductedDuringWithdrawal
      - withdrawalReason
      type: object
      properties:
        claimPeriodStartDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          description: This is the start date of the claim period for the withdrawal charge. It must be the sixth day of the month. You cannot enter a date in the future.
          example: 2018-01-06
        claimPeriodEndDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          description: This is the end date of the claim period for the withdrawal charge. It must be the fifth day of the month. It has to be the month after the claimPeriodStartDate.
          example: 2018-02-05
        automaticRecoveryAmount:
          type: number
          description: This is the amount HMRC can collect from the LISA manager when there is a withdrawal charge. If there are no funds available, this value must be 0.
        withdrawalAmount:
          type: number
          description: This is the amount that the investor has withdrawn from the LISA account.
        withdrawalChargeAmount:
          type: number
          description: This is the amount charged for the withdrawal.
        withdrawalChargeAmountYTD:
          type: number
          description: This is the total value of withdrawal charges reported to HMRC for the current tax year to date.
        fundsDeductedDuringWithdrawal:
          type: boolean
          description: This confirms if the investor was charged and funds were deducted at the time of the withdrawal.
        withdrawalReason:
          allOf:
          - $ref: '#/components/schemas/withdrawalReason'
          - description: This is used by HMRC to decide how the withdrawal charge is processed.
        supersededBy:
          pattern: ^\d{1,10}$
          type: string
          example: '1234567890'
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede6'
          - description: Correct an existing withdrawal charge. You can request an additional charge, reduce a charge, or refund a charge.
    supersede6:
      required:
      - originalTransactionId
      - originalWithdrawalChargeAmount
      - transactionResult
      - reason
      type: object
      properties:
        originalTransactionId:
          pattern: ^\d{1,10}$
          type: string
          example: '1234567890'
        originalWithdrawalChargeAmount:
          type: number
          description: This is how much was in the withdrawalChargeAmount in the original request.
        transactionResult:
          type: number
          description: The amount to be added to or recovered from the original withdrawal charge.
        reason:
          allOf:
          - $ref: '#/components/schemas/reason'
          - description: Confirm whether an additional charge is due or whether the investor is owed some money.
      description: Correct an existing withdrawal charge. You can request an additional charge, reduce a charge, or refund a charge.
    lifetimeIsaManagerAccountsTransactionsRequest:
      title: Lifetime ISA Manager Accounts Transactions Request
      required:
      - periodStartDate
      - periodEndDate
      - inboundPayments
      - bonuses
      type: object
      properties:
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        periodStartDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-06
        periodEndDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-06-05
        htbTransfer:
          allOf:
          - $ref: '#/components/schemas/htbTransfer'
          - description: Details about Help to Buy funds.
        inboundPayments:
          allOf:
          - $ref: '#/components/schemas/inboundPayments'
          - description: Details about qualifying deposits and account balance.
        bonuses:
          allOf:
          - $ref: '#/components/schemas/bonuses'
          - description: Bonus payment details.
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede7'
          - description: Correct an existing bonus claim with an additional bonus or a recovery of an overpaid amount.
    htbTransfer:
      required:
      - htbTransferInForPeriod
      - htbTransferTotalYTD
      type: object
      properties:
        htbTransferInForPeriod:
          type: number
          description: The total amount of Help to Buy funds in the account during the claim period. You can include an amount up to 2 decimal places.
        htbTransferTotalYTD:
          type: number
          description: The total amount of Help to Buy funds in the account in the tax year to date. You can include an amount up to 2 decimal places. If there is a number in htbTransferInForPeriod, then the number in htbTransferTotalYTD must be greater than 0.
      description: Details about Help to Buy funds.
    inboundPayments:
      required:
      - newSubsYTD
      - totalSubsForPeriod
      - totalSubsYTD
      type: object
      properties:
        newSubsForPeriod:
          type: number
          description: The total value of new qualifying deposits paid in to the account during the claim period. You can include an amount up to 2 decimal places.
        newSubsYTD:
          type: number
          description: The total value of new qualifying deposits paid in to the account during the tax year to date. You can include an amount up to 2 decimal places. If there is a number in newSubsForPeriod, then the number in newSubsYTD must be greater than 0.
        totalSubsForPeriod:
          type: number
          description: The total amount in the account during the claim period that qualifies for a bonus payment. You can include an amount up to 2 decimal places. The totalSubsForPeriod must always be greater than 0 except when bonusDueForPeriod is 0.
        totalSubsYTD:
          type: number
          description: The total amount in the account during the tax year to date that qualifies for a bonus payment. You can include an amount up to 2 decimal places. The totalSubsYTD must be the same as or more than totalSubsForPeriod.
      description: Details about qualifying deposits and account balance.
    bonuses:
      required:
      - bonusDueForPeriod
      - totalBonusDueYTD
      - claimReason
      type: object
      properties:
        bonusDueForPeriod:
          type: number
          description: The total bonus payment amount due for the claim period. You can include an amount up to 2 decimal places. If you supersede this claim and the supersededReason is ‘bonus recovery’, then the bonusDueForPeriod can be 0. If not, it must always be greater than 0.
        totalBonusDueYTD:
          type: number
          description: The total bonus payment amount due for the tax year to date. You can include an amount up to 2 decimal places. This cannot be less than bonusDueForPeriod.
        bonusPaidYTD:
          type: number
          description: The total bonus payment that has already been claimed and paid in the tax year to date. You can include an amount up to 2 decimal places.
        claimReason:
          $ref: '#/components/schemas/claimReasonType'
      description: Bonus payment details.
    claimReasonType:
      enum:
      - Life Event
      - Regular Bonus
      - Superseded Bonus
      type: string
    supersede7:
      required:
      - originalTransactionId
      - originalBonusDueForPeriod
      - transactionResult
      - reason
      type: object
      properties:
        automaticRecoveryAmount:
          type: number
          description: This is the amount HMRC can collect from the LISA manager in bonus recovery cases. If there are no funds available, this value must be 0.
        originalTransactionId:
          pattern: ^\d{1,10}$
          type: string
          example: '1234567890'
        originalBonusDueForPeriod:
          type: number
          description: This is how much was in the bonusDueForPeriod in the original bonus request.
        transactionResult:
          type: number
          description: The amount to be added to or recovered from the original bonus.
        reason:
          $ref: '#/components/schemas/supersededReasonType'
      description: Correct an existing bonus claim with an additional bonus or a recovery of an overpaid amount.
    supersededReasonType:
      enum:
      - Bonus recovery
      - Additional bonus
      type: string
    lifetimeIsaManagerAccountsTransactionsResponse:
      title: Lifetime ISA Manager Accounts Transactions Response
      required:
      - status
      - success
      - data
      type: object
      properties:
        status:
          type: number
          description: The HTTP status of the result of the API call. Always 201.
        success:
          type: boolean
          description: Whether the API call was successful or not. Always true.
        data:
          allOf:
          - $ref: '#/components/schemas/data11'
          - description: Response details.
    data11:
      required:
      - message
      - transactionId
      type: object
      properties:
        message:
          allOf:
          - $ref: '#/components/schemas/message7'
          - description: A human-readable explanation for the result of the API call.
        transactionId:
          pattern: ^\d{10}$
          type: string
          description: The transaction’s ID reference number. You must store this ID as it is needed for other API calls.
      description: Response details.
    message7:
      enum:
      - Bonus transaction created
      - Bonus transaction created - late notification
      - Bonus transaction superseded
      type: string
      description: A human-readable explanation for the result of the API call.
    lifetimeIsaManagerAccountsTransactionsTransactionIdResponse:
      title: Lifetime ISA Manager Accounts Transactions Transaction Id Response
      required:
      - periodStartDate
      - periodEndDate
      - inboundPayments
      - bonuses
      type: object
      properties:
        lifeEventId:
          pattern: ^\d{10}$
          type: string
          example: '0987654321'
        periodStartDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-06
        periodEndDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-06-05
        htbTransfer:
          allOf:
          - $ref: '#/components/schemas/htbTransfer1'
          - description: Details about Help to Buy funds.
        inboundPayments:
          allOf:
          - $ref: '#/components/schemas/inboundPayments1'
          - description: Details about qualifying deposits and account balance.
        bonuses:
          allOf:
          - $ref: '#/components/schemas/bonuses1'
          - description: Bonus payment details.
        supersededBy:
          pattern: ^\d{1,10}$
          type: string
          example: '1234567890'
        supersede:
          allOf:
          - $ref: '#/components/schemas/supersede7'
          - description: Correct an existing bonus claim with an additional bonus or a recovery of an overpaid amount.
    htbTransfer1:
      required:
      - htbTransferInForPeriod
      - htbTransferTotalYTD
      type: object
      properties:
        htbTransferInForPeriod:
          type: number
          description: The total amount of Help to Buy funds in the account during the claim period.
        htbTransferTotalYTD:
          type: number
          description: The total amount of Help to Buy funds in the account in the tax year to date.
      description: Details about Help to Buy funds.
    inboundPayments1:
      required:
      - newSubsYTD
      - totalSubsForPeriod
      - totalSubsYTD
      type: object
      properties:
        newSubsForPeriod:
          type: number
          description: The total value of new qualifying deposits paid in to the account during the claim period.
        newSubsYTD:
          type: number
          description: The total value of new qualifying deposits paid in to the account during the tax year to date.
        totalSubsForPeriod:
          type: number
          description: The total amount in the account during the claim period that qualifies for a bonus payment.
        totalSubsYTD:
          type: number
          description: The total amount in the account during the tax year to date that qualifies for a bonus payment.
      description: Details about qualifying deposits and account balance.
    bonuses1:
      required:
      - bonusDueForPeriod
      - totalBonusDueYTD
      - claimReason
      type: object
      properties:
        bonusDueForPeriod:
          type: number
          description: The total bonus payment amount due for the claim period.
        totalBonusDueYTD:
          type: number
          description: The total bonus payment amount due for the tax year to date.
        bonusPaidYTD:
          type: number
          description: The total bonus payment that has already been claimed and paid in the tax year to date.
        claimReason:
          $ref: '#/components/schemas/claimReasonType'
      description: Bonus payment details.
    lifetimeIsaManagerAccountsTransactionsTransactionIdPaymentsResponse:
      title: Lifetime ISA Manager Accounts Transactions Transaction Id Payments Response
      required:
      - transactionId
      - paymentStatus
      type: object
      properties:
        transactionId:
          pattern: ^\d{1,10}$
          type: string
        transactionType:
          allOf:
          - $ref: '#/components/schemas/transactionType'
          - description: The type of transaction. This can be money owed to HMRC (Debt), or money paid out by HMRC (Payment).
        paymentDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
        paymentDueDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
        paymentStatus:
          allOf:
          - $ref: '#/components/schemas/paymentStatus'
          - description: The status of the transaction being requested.
            example: Paid
        paymentReference:
          pattern: ^.{1,16}$
          type: string
          description: The reference of the payment made.
          example: '12345'
        paymentAmount:
          type: number
          description: The amount paid for the transaction.
          example: 1000
        supersededBy:
          pattern: ^\d{1,10}$
          type: string
    transactionType:
      enum:
      - Payment
      - Debt
      type: string
      description: The type of transaction. This can be money owed to HMRC (Debt), or money paid out by HMRC (Payment).
    paymentStatus:
      enum:
      - Paid
      - Pending
      - Due
      - Collected
      - Cancelled
      - Void
      - Superseded
      - Charge refund cancelled
      type: string
      description: The status of the transaction being requested.
      example: Paid
    lifetimeIsaManagerPaymentsResponse:
      title: Lifetime ISA Manager Payments Response
      required:
      - lisaManagerReferenceNumber
      - payments
      type: object
      properties:
        lisaManagerReferenceNumber:
          pattern: ^Z([0-9]{4}|[0-9]{6})$
          type: string
          example: Z1234
        payments:
          type: array
          items:
            $ref: '#/components/schemas/payment'
          description: Pending and paid payments from HMRC and due and collected debts owed to HMRC.
    payment:
      required:
      - transactionType
      - status
      - paymentAmount
      type: object
      properties:
        transactionType:
          allOf:
          - $ref: '#/components/schemas/transactionType'
          - description: The type of transaction. This can be money owed to HMRC (Debt), or money paid out by HMRC (Payment).
        status:
          allOf:
          - $ref: '#/components/schemas/status'
          - description: The status of the transaction being requested.
        paymentAmount:
          type: number
          description: Amount pending or paid to the LISA provider, or the amount due or collected from the LISA provider.
          example: 23456
        paymentReference:
          pattern: ^.{1,35}$
          type: string
          example: '1234567890'
        paymentDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
        dueDate:
          pattern: ^\d{4}-\d{2}-\d{2}$
          type: string
          example: 2017-05-20
    status:
      enum:
      - Pending
      - Paid
      - Due
      - Collected
      type: string
      description: The status of the transaction being requested.
  examples:
    badRequest:
      value:
        code: BAD_REQUEST
        message: Bad Request
    invalidLmrn:
      value:
        code: BAD_REQUEST
        message: Enter lisaManagerReferenceNumber in the correct format, like Z1234
    notOpenStatusBadRequest:
      value:
        code: BAD_REQUEST
        message: Bad Request
    notOpenStatusUnauthorized:
      value:
        code: UNAUTHORIZED
        message: Enter a real lisaManagerReferenceNumber
    accountIdNotFound:
      value:
        code: INVESTOR_ACCOUNTID_NOT_FOUND
        message: Enter a real accountId
    invalidAccountId:
      value:
        code: BAD_REQUEST
        message: Enter accountId in the correct format, like ABC12345
    accountClosed:
      value:
        code: INVESTOR_ACCOUNT_ALREADY_CLOSED
        message: The LISA account is already closed
    accountCancelled:
      value:
        code: INVESTOR_ACCOUNT_ALREADY_CANCELLED
        message: The LISA account is already cancelled
    accountVoided:
      value:
        code: INVESTOR_ACCOUNT_ALREADY_VOID
        message: The LISA account is already void
    lifeEventExists:
      value:
        code: LIFE_EVENT_ALREADY_EXISTS
        message: The investor’s life event has already been reported
    supersedingLifeEventMisMatchError:
      value:
        code: SUPERSEDED_LIFE_EVENT_MISMATCH_ERROR
        message: originalLifeEventId and the originalEventDate do not match the information in the original request
    accountVoid:
      value:
        code: INVESTOR_ACCOUNT_ALREADY_VOID
        message: The LISA account is already void
    supersedingLifeEventAlreadySuperseded:
      value:
        code: SUPERSEDED_LIFE_EVENT_ALREADY_SUPERSEDED
        message: This life event has already been superseded
    fundReleaseNotFound:
      value:
        code: FUND_RELEASE_NOT_FOUND
        message: The fundReleaseId does not match HMRC’s records
    fundReleaseLifeEventAlreadySuperseded:
      value:
        code: FUND_RELEASE_SUPERSEDED
        message: This fund release has already been superseded
tags:
  - name: LISA Endpoints
  - name: LISA Investors
  - name: LISA Accounts
  - name: Life Events
  - name: Withdrawal Charges
  - name: Bonus Requests
  - name: Payments and Debts